<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="CMenu" version="3.0"/>
  <include name="Clutter" version="0"/>
  <include name="ClutterX11" version="0"/>
  <include name="Cogl" version="0"/>
  <include name="CoglPango" version="0"/>
  <include name="Meta" version="Muffin.0"/>
  <include name="Soup" version="2.4"/>
  <include name="St" version="1.0"/>
  <namespace name="Cinnamon"
             version="0.1"
             shared-library="libcinnamon.so"
             c:identifier-prefixes="Cinnamon"
             c:symbol-prefixes="cinnamon">
    <function-macro name="APP" c:identifier="CINNAMON_APP" introspectable="0">
      <source-position filename="../src/cinnamon-app.h" line="19"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APP_CLASS"
                    c:identifier="CINNAMON_APP_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APP_GET_CLASS"
                    c:identifier="CINNAMON_APP_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app.h" line="23"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APP_SYSTEM"
                    c:identifier="CINNAMON_APP_SYSTEM"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app-system.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APP_SYSTEM_CLASS"
                    c:identifier="CINNAMON_APP_SYSTEM_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app-system.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="APP_SYSTEM_GET_CLASS"
                    c:identifier="CINNAMON_APP_SYSTEM_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app-system.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="App"
           c:symbol-prefix="app"
           c:type="CinnamonApp"
           parent="GObject.Object"
           glib:type-name="CinnamonApp"
           glib:get-type="cinnamon_app_get_type"
           glib:type-struct="AppClass">
      <source-position filename="../src/cinnamon-app.h" line="29"/>
      <method name="activate" c:identifier="cinnamon_app_activate">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="566">Like cinnamon_app_activate_full(), but using the default workspace and
event timestamp.</doc>
        <source-position filename="../src/cinnamon-app.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="568">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="activate_full" c:identifier="cinnamon_app_activate_full">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="579">Perform an appropriate default action for operating on this application,
dependent on its current state.  For example, if the application is not
currently running, launch it.  If it is running, activate the most
recently used NORMAL window (or if that window has a transient, the most
recently used transient for that window).</doc>
        <source-position filename="../src/cinnamon-app.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="581">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="582">launch on this workspace, or -1 for default. Ignored if
  activating an existing window</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="584">Event timestamp</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_window"
              c:identifier="cinnamon_app_activate_window">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="492">Bring all windows for the given app to the foreground,
but ensure that @window is on top.  If @window is %NULL,
the window with the most recent user time for the app
will be used.

This function has no effect if @app is not currently running.</doc>
        <source-position filename="../src/cinnamon-app.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="494">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="window"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="495">Window to be focused</doc>
            <type name="Meta.Window" c:type="MetaWindow*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="496">Event timestamp</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_open_new_window"
              c:identifier="cinnamon_app_can_open_new_window">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="666">Returns %TRUE if the app supports opening a new window through
cinnamon_app_open_new_window() (ie, if calling that function will
result in actually opening a new window and not something else,
like presenting the most recently active one)</doc>
        <source-position filename="../src/cinnamon-app.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="668">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_icon_texture"
              c:identifier="cinnamon_app_create_icon_texture">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="239">Look up the icon for this application, and create a #ClutterTexture
for it at the given size.</doc>
        <source-position filename="../src/cinnamon-app.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="247">A floating #ClutterActor</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="241">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="242">the size of the icon to create</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_icon_texture_for_window"
              c:identifier="cinnamon_app_create_icon_texture_for_window">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="272">Look up the icon for this application, and create a #ClutterTexture
for it at the given size.  If for_window is NULL, it bases the icon
off the most-recently-used window for the app, otherwise it attempts to
use for_window for determining the icon.</doc>
        <source-position filename="../src/cinnamon-app.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="283">A floating #ClutterActor</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="274">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="275">the size of the icon to create</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="for_window"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="276">Optional - the backing MetaWindow to look up for.</doc>
            <type name="Meta.Window" c:type="MetaWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app_info" c:identifier="cinnamon_app_get_app_info">
        <source-position filename="../src/cinnamon-app.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="1247">The #GMenuDesktopAppInfo for this app, or %NULL if backed by a window</doc>
          <type name="CMenu.DesktopAppInfo" c:type="GMenuDesktopAppInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1245">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="cinnamon_app_get_description">
        <source-position filename="../src/cinnamon-app.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flatpak_app_id"
              c:identifier="cinnamon_app_get_flatpak_app_id">
        <source-position filename="../src/cinnamon-app.h" line="94"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="cinnamon_app_get_id">
        <source-position filename="../src/cinnamon-app.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_flatpak" c:identifier="cinnamon_app_get_is_flatpak">
        <source-position filename="../src/cinnamon-app.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="716">TRUE if #app is a flatpak app, FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="714">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keywords" c:identifier="cinnamon_app_get_keywords">
        <source-position filename="../src/cinnamon-app.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_windows" c:identifier="cinnamon_app_get_n_windows">
        <source-position filename="../src/cinnamon-app.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="cinnamon_app_get_name">
        <source-position filename="../src/cinnamon-app.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nodisplay" c:identifier="cinnamon_app_get_nodisplay">
        <source-position filename="../src/cinnamon-app.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pids" c:identifier="cinnamon_app_get_pids">
        <source-position filename="../src/cinnamon-app.h" line="75"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="961">An unordered list of process identifiers associated with this application.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gint"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="959">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="cinnamon_app_get_state"
              glib:get-property="state">
        <source-position filename="../src/cinnamon-app.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="704">State of the application</doc>
          <type name="AppState" c:type="CinnamonAppState"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="702">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree_entry" c:identifier="cinnamon_app_get_tree_entry">
        <source-position filename="../src/cinnamon-app.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="1259">The #GMenuTreeEntry for this app, or %NULL if backed by a window</doc>
          <type name="CMenu.TreeEntry" c:type="GMenuTreeEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1257">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_windows" c:identifier="cinnamon_app_get_windows">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="759">Get the toplevel, interesting windows which are associated with this
application.  The returned list will be sorted first by whether
they're on the active workspace, then by whether they're visible,
and finally by the time the user last interacted with them.</doc>
        <source-position filename="../src/cinnamon-app.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="768">List of windows</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Meta.Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_on_workspace"
              c:identifier="cinnamon_app_is_on_workspace">
        <source-position filename="../src/cinnamon-app.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Meta.Workspace" c:type="MetaWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_window_backed"
              c:identifier="cinnamon_app_is_window_backed">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="415">A window backed application is one which represents just an open
window, i.e. there's no .desktop file association, so we don't know
how to launch it again.</doc>
        <source-position filename="../src/cinnamon-app.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="launch" c:identifier="cinnamon_app_launch" throws="1">
        <source-position filename="../src/cinnamon-app.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1193">Event timestamp, or 0 for current event timestamp</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="uris" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1194">List of uris to pass to application</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1195">Start on this workspace, or -1 for default</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="startup_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1196">Returned startup notification ID, or %NULL if none</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="launch_offloaded"
              c:identifier="cinnamon_app_launch_offloaded"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="1216">Launch an application using the dedicated gpu (if available)</doc>
        <source-position filename="../src/cinnamon-app.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1218">Event timestamp, or 0 for current event timestamp</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="uris" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1219">List of uris to pass to application</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1220">Start on this workspace, or -1 for default</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="startup_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1221">Returned startup notification ID, or %NULL if none</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_new_window"
              c:identifier="cinnamon_app_open_new_window">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="637">Request that the application create a new window.</doc>
        <source-position filename="../src/cinnamon-app.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="639">a #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="640">open on this workspace, or -1 for default</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_quit" c:identifier="cinnamon_app_request_quit">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="1068">Initiate an asynchronous request to quit this application.
The application may interact with the user, and the user
might cancel the quit request from the application UI.

This operation may not be supported for all applications.</doc>
        <source-position filename="../src/cinnamon-app.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app.c"
               line="1078">%TRUE if a quit request is supported for this application</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app.c"
                 line="1070">A #CinnamonApp</doc>
            <type name="App" c:type="CinnamonApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="state" transfer-ownership="none" getter="get_state">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app.c"
             line="1358">The high-level state of the application, effectively whether it's
running or not, or transitioning between those states.</doc>
        <type name="AppState"/>
      </property>
      <glib:signal name="windows-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AppClass"
            c:type="CinnamonAppClass"
            glib:is-gtype-struct-for="App">
      <source-position filename="../src/cinnamon-app.h" line="29"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="AppPrivate" c:type="CinnamonAppPrivate" disguised="1">
      <source-position filename="../src/cinnamon-app.h" line="16"/>
    </record>
    <enumeration name="AppState"
                 glib:type-name="CinnamonAppState"
                 glib:get-type="cinnamon_app_state_get_type"
                 c:type="CinnamonAppState">
      <member name="stopped"
              value="0"
              c:identifier="CINNAMON_APP_STATE_STOPPED"
              glib:nick="stopped"
              glib:name="CINNAMON_APP_STATE_STOPPED">
      </member>
      <member name="starting"
              value="1"
              c:identifier="CINNAMON_APP_STATE_STARTING"
              glib:nick="starting"
              glib:name="CINNAMON_APP_STATE_STARTING">
      </member>
      <member name="running"
              value="2"
              c:identifier="CINNAMON_APP_STATE_RUNNING"
              glib:nick="running"
              glib:name="CINNAMON_APP_STATE_RUNNING">
      </member>
    </enumeration>
    <class name="AppSystem"
           c:symbol-prefix="app_system"
           c:type="CinnamonAppSystem"
           parent="GObject.Object"
           glib:type-name="CinnamonAppSystem"
           glib:get-type="cinnamon_app_system_get_type"
           glib:type-struct="AppSystemClass">
      <source-position filename="../src/cinnamon-app-system.h" line="37"/>
      <function name="get_default"
                c:identifier="cinnamon_app_system_get_default">
        <source-position filename="../src/cinnamon-app-system.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="766">The global #CinnamonAppSystem singleton</doc>
          <type name="AppSystem" c:type="CinnamonAppSystem*"/>
        </return-value>
      </function>
      <virtual-method name="favorites_changed">
        <source-position filename="../src/cinnamon-app-system.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="appsys" transfer-ownership="none">
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="0">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="installed_changed">
        <source-position filename="../src/cinnamon-app-system.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="appsys" transfer-ownership="none">
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="0">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_all" c:identifier="cinnamon_app_system_get_all">
        <source-position filename="../src/cinnamon-app-system.h" line="53"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="961">All installed applications</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="App"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running"
              c:identifier="cinnamon_app_system_get_running">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app-system.c"
             line="1004">Returns the set of applications which currently have at least one
open window in the given context.</doc>
        <source-position filename="../src/cinnamon-app-system.h" line="55"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="1011">Active applications</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="App"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app-system.c"
                 line="1006">A #CinnamonAppSystem</doc>
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="cinnamon_app_system_get_tree">
        <source-position filename="../src/cinnamon-app-system.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="755">The #GMenuTree for apps</doc>
          <type name="CMenu.Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_app" c:identifier="cinnamon_app_system_lookup_app">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app-system.c"
             line="793">Find a #CinnamonApp corresponding to an id.</doc>
        <source-position filename="../src/cinnamon-app-system.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="798">The #CinnamonApp for id, or %NULL if none</doc>
          <type name="App" c:type="CinnamonApp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_desktop_wmclass"
              c:identifier="cinnamon_app_system_lookup_desktop_wmclass">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app-system.c"
             line="868">Find a valid application whose .desktop file, without the extension
and properly canonicalized, matches @wmclass.</doc>
        <source-position filename="../src/cinnamon-app-system.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="876">A #CinnamonApp for @wmclass</doc>
          <type name="App" c:type="CinnamonApp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app-system.c"
                 line="870">a #CinnamonAppSystem</doc>
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
          <parameter name="wmclass"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app-system.c"
                 line="871">A WM_CLASS value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_flatpak_app_id"
              c:identifier="cinnamon_app_system_lookup_flatpak_app_id">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app-system.c"
             line="940">Find a #CinnamonApp corresponding to a flatpak app id.</doc>
        <source-position filename="../src/cinnamon-app-system.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="945">The #CinnamonApp for app_id, or %NULL if none</doc>
          <type name="App" c:type="CinnamonApp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_startup_wmclass"
              c:identifier="cinnamon_app_system_lookup_startup_wmclass">
        <doc xml:space="preserve"
             filename="../src/cinnamon-app-system.c"
             line="920">Find a valid application whose .desktop file contains a
StartupWMClass entry matching @wmclass.</doc>
        <source-position filename="../src/cinnamon-app-system.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-app-system.c"
               line="928">A #CinnamonApp for @wmclass</doc>
          <type name="App" c:type="CinnamonApp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app-system.c"
                 line="922">a #CinnamonAppSystem</doc>
            <type name="AppSystem" c:type="CinnamonAppSystem*"/>
          </instance-parameter>
          <parameter name="wmclass"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-app-system.c"
                 line="923">A WM_CLASS value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AppSystemPrivate" c:type="CinnamonAppSystemPrivate*"/>
      </field>
      <glib:signal name="app-state-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="App"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="installed-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AppSystemClass"
            c:type="CinnamonAppSystemClass"
            glib:is-gtype-struct-for="AppSystem">
      <source-position filename="../src/cinnamon-app-system.h" line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="installed_changed">
        <callback name="installed_changed">
          <source-position filename="../src/cinnamon-app-system.h" line="35"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="appsys" transfer-ownership="none">
              <type name="AppSystem" c:type="CinnamonAppSystem*"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="favorites_changed">
        <callback name="favorites_changed">
          <source-position filename="../src/cinnamon-app-system.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="appsys" transfer-ownership="none">
              <type name="AppSystem" c:type="CinnamonAppSystem*"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AppSystemPrivate"
            c:type="CinnamonAppSystemPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-app-system.h" line="22"/>
    </record>
    <docsection name="CinnamonRecorder">
      <doc xml:space="preserve"
           filename="../src/cinnamon-recorder.h"
           line="9">short_description: Record from a #ClutterStage
The #CinnamonRecorder object is used to make recordings ("screencasts")
of a #ClutterStage. Recording is done via #GStreamer. The default is
to encode as a Theora movie and write it to a file in the current
directory named after the date, but the encoding and output can
be configured.</doc>
    </docsection>
    <docsection name="CinnamonXFixesCursor">
      <doc xml:space="preserve"
           filename="../src/cinnamon-xfixes-cursor.c"
           line="12">short_description: Capture/manipulate system mouse cursor.
The #CinnamonXFixesCursor object uses the XFixes extension to show/hide the
the system mouse pointer, to grab its image as it changes, and emit a
notification when its image changes.</doc>
    </docsection>
    <enumeration name="Cursor"
                 glib:type-name="CinnamonCursor"
                 glib:get-type="cinnamon_cursor_get_type"
                 c:type="CinnamonCursor">
      <member name="dnd_in_drag"
              value="0"
              c:identifier="CINNAMON_CURSOR_DND_IN_DRAG"
              glib:nick="dnd-in-drag"
              glib:name="CINNAMON_CURSOR_DND_IN_DRAG">
      </member>
      <member name="dnd_unsupported_target"
              value="1"
              c:identifier="CINNAMON_CURSOR_DND_UNSUPPORTED_TARGET"
              glib:nick="dnd-unsupported-target"
              glib:name="CINNAMON_CURSOR_DND_UNSUPPORTED_TARGET">
      </member>
      <member name="dnd_move"
              value="2"
              c:identifier="CINNAMON_CURSOR_DND_MOVE"
              glib:nick="dnd-move"
              glib:name="CINNAMON_CURSOR_DND_MOVE">
      </member>
      <member name="dnd_copy"
              value="3"
              c:identifier="CINNAMON_CURSOR_DND_COPY"
              glib:nick="dnd-copy"
              glib:name="CINNAMON_CURSOR_DND_COPY">
      </member>
      <member name="pointing_hand"
              value="4"
              c:identifier="CINNAMON_CURSOR_POINTING_HAND"
              glib:nick="pointing-hand"
              glib:name="CINNAMON_CURSOR_POINTING_HAND">
      </member>
      <member name="resize_bottom"
              value="5"
              c:identifier="CINNAMON_CURSOR_RESIZE_BOTTOM"
              glib:nick="resize-bottom"
              glib:name="CINNAMON_CURSOR_RESIZE_BOTTOM">
      </member>
      <member name="resize_top"
              value="6"
              c:identifier="CINNAMON_CURSOR_RESIZE_TOP"
              glib:nick="resize-top"
              glib:name="CINNAMON_CURSOR_RESIZE_TOP">
      </member>
      <member name="resize_left"
              value="7"
              c:identifier="CINNAMON_CURSOR_RESIZE_LEFT"
              glib:nick="resize-left"
              glib:name="CINNAMON_CURSOR_RESIZE_LEFT">
      </member>
      <member name="resize_right"
              value="8"
              c:identifier="CINNAMON_CURSOR_RESIZE_RIGHT"
              glib:nick="resize-right"
              glib:name="CINNAMON_CURSOR_RESIZE_RIGHT">
      </member>
      <member name="resize_bottom_right"
              value="9"
              c:identifier="CINNAMON_CURSOR_RESIZE_BOTTOM_RIGHT"
              glib:nick="resize-bottom-right"
              glib:name="CINNAMON_CURSOR_RESIZE_BOTTOM_RIGHT">
      </member>
      <member name="resize_bottom_left"
              value="10"
              c:identifier="CINNAMON_CURSOR_RESIZE_BOTTOM_LEFT"
              glib:nick="resize-bottom-left"
              glib:name="CINNAMON_CURSOR_RESIZE_BOTTOM_LEFT">
      </member>
      <member name="resize_top_right"
              value="11"
              c:identifier="CINNAMON_CURSOR_RESIZE_TOP_RIGHT"
              glib:nick="resize-top-right"
              glib:name="CINNAMON_CURSOR_RESIZE_TOP_RIGHT">
      </member>
      <member name="resize_top_left"
              value="12"
              c:identifier="CINNAMON_CURSOR_RESIZE_TOP_LEFT"
              glib:nick="resize-top-left"
              glib:name="CINNAMON_CURSOR_RESIZE_TOP_LEFT">
      </member>
      <member name="crosshair"
              value="13"
              c:identifier="CINNAMON_CURSOR_CROSSHAIR"
              glib:nick="crosshair"
              glib:name="CINNAMON_CURSOR_CROSSHAIR">
      </member>
      <member name="text"
              value="14"
              c:identifier="CINNAMON_CURSOR_TEXT"
              glib:nick="text"
              glib:name="CINNAMON_CURSOR_TEXT">
      </member>
    </enumeration>
    <function-macro name="DOC_SYSTEM"
                    c:identifier="CINNAMON_DOC_SYSTEM"
                    introspectable="0">
      <source-position filename="../src/cinnamon-doc-system.h" line="9"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOC_SYSTEM_CLASS"
                    c:identifier="CINNAMON_DOC_SYSTEM_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-doc-system.h" line="10"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOC_SYSTEM_GET_CLASS"
                    c:identifier="CINNAMON_DOC_SYSTEM_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-doc-system.h" line="13"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="DocSystem"
           c:symbol-prefix="doc_system"
           c:type="CinnamonDocSystem"
           parent="GObject.Object"
           glib:type-name="CinnamonDocSystem"
           glib:get-type="cinnamon_doc_system_get_type"
           glib:type-struct="DocSystemClass">
      <source-position filename="../src/cinnamon-doc-system.h" line="29"/>
      <function name="get_default"
                c:identifier="cinnamon_doc_system_get_default">
        <source-position filename="../src/cinnamon-doc-system.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-doc-system.c"
               line="151">The global #CinnamonDocSystem singleton</doc>
          <type name="DocSystem" c:type="CinnamonDocSystem*"/>
        </return-value>
      </function>
      <method name="get_all" c:identifier="cinnamon_doc_system_get_all">
        <doc xml:space="preserve"
             filename="../src/cinnamon-doc-system.c"
             line="38">Returns the currently cached set of recent files. Recent files are read initially
from the underlying #GtkRecentManager, and updated when it changes.
This function does not perform I/O.</doc>
        <source-position filename="../src/cinnamon-doc-system.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-doc-system.c"
               line="46">Cached recent file infos</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Gtk.RecentInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-doc-system.c"
                 line="40">A #CinnamonDocSystem</doc>
            <type name="DocSystem" c:type="CinnamonDocSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DocSystemPrivate" c:type="CinnamonDocSystemPrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DocSystemClass"
            c:type="CinnamonDocSystemClass"
            glib:is-gtype-struct-for="DocSystem">
      <source-position filename="../src/cinnamon-doc-system.h" line="29"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DocSystemPrivate"
            c:type="CinnamonDocSystemPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-doc-system.h" line="17"/>
    </record>
    <function-macro name="EMBEDDED_WINDOW"
                    c:identifier="CINNAMON_EMBEDDED_WINDOW"
                    introspectable="0">
      <source-position filename="../src/cinnamon-embedded-window.h" line="9"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMBEDDED_WINDOW_CLASS"
                    c:identifier="CINNAMON_EMBEDDED_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-embedded-window.h" line="10"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMBEDDED_WINDOW_GET_CLASS"
                    c:identifier="CINNAMON_EMBEDDED_WINDOW_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-embedded-window.h" line="13"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="EmbeddedWindow"
           c:symbol-prefix="embedded_window"
           c:type="CinnamonEmbeddedWindow"
           parent="Gtk.Window"
           glib:type-name="CinnamonEmbeddedWindow"
           glib:get-type="cinnamon_embedded_window_get_type"
           glib:type-struct="EmbeddedWindowClass">
      <source-position filename="../src/cinnamon-embedded-window.h" line="30"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="cinnamon_embedded_window_new">
        <source-position filename="../src/cinnamon-embedded-window.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="stage" transfer-ownership="none">
            <type name="Clutter.Stage" c:type="ClutterStage*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="stage"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Clutter.Stage"/>
      </property>
      <field name="parent">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="EmbeddedWindowPrivate"
              c:type="CinnamonEmbeddedWindowPrivate*"/>
      </field>
    </class>
    <record name="EmbeddedWindowClass"
            c:type="CinnamonEmbeddedWindowClass"
            glib:is-gtype-struct-for="EmbeddedWindow">
      <source-position filename="../src/cinnamon-embedded-window.h" line="30"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <record name="EmbeddedWindowPrivate"
            c:type="CinnamonEmbeddedWindowPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-embedded-window.h" line="18"/>
    </record>
    <callback name="FileContentsCallback"
              c:type="CinnamonFileContentsCallback"
              version="3.1">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.h"
           line="40">Callback type for cinnamon_get_file_contents_utf8()</doc>
      <source-position filename="../src/cinnamon-util.h" line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="utf8_contents" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.h"
               line="42">The contents of the file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.h"
               line="43">Data passed to cinnamon_get_file_contents_utf8()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="GENERIC_CONTAINER"
                    c:identifier="CINNAMON_GENERIC_CONTAINER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="8"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GENERIC_CONTAINER_CLASS"
                    c:identifier="CINNAMON_GENERIC_CONTAINER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="9"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GENERIC_CONTAINER_GET_CLASS"
                    c:identifier="CINNAMON_GENERIC_CONTAINER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="12"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GLOBAL"
                    c:identifier="CINNAMON_GLOBAL"
                    introspectable="0">
      <source-position filename="../src/cinnamon-global.h" line="17"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GLOBAL_CLASS"
                    c:identifier="CINNAMON_GLOBAL_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-global.h" line="18"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GLOBAL_GET_CLASS"
                    c:identifier="CINNAMON_GLOBAL_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-global.h" line="21"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GTK_EMBED"
                    c:identifier="CINNAMON_GTK_EMBED"
                    introspectable="0">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="10"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GTK_EMBED_CLASS"
                    c:identifier="CINNAMON_GTK_EMBED_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="11"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GTK_EMBED_GET_CLASS"
                    c:identifier="CINNAMON_GTK_EMBED_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="GenericContainer"
           c:symbol-prefix="generic_container"
           c:type="CinnamonGenericContainer"
           parent="St.Widget"
           glib:type-name="CinnamonGenericContainer"
           glib:get-type="cinnamon_generic_container_get_type"
           glib:type-struct="GenericContainerClass">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <method name="get_n_skip_paint"
              c:identifier="cinnamon_generic_container_get_n_skip_paint">
        <source-position filename="../src/cinnamon-generic-container.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-generic-container.c"
               line="187">Number of children which will not be painted.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="185">A #CinnamonGenericContainer</doc>
            <type name="GenericContainer" c:type="CinnamonGenericContainer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_skip_paint"
              c:identifier="cinnamon_generic_container_get_skip_paint">
        <doc xml:space="preserve"
             filename="../src/cinnamon-generic-container.c"
             line="195">Gets whether or not @actor is skipped when painting.</doc>
        <source-position filename="../src/cinnamon-generic-container.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-generic-container.c"
               line="202">%TRUE or %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="197">A #CinnamonGenericContainer</doc>
            <type name="GenericContainer" c:type="CinnamonGenericContainer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="198">Child #ClutterActor</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_paint"
              c:identifier="cinnamon_generic_container_set_skip_paint">
        <doc xml:space="preserve"
             filename="../src/cinnamon-generic-container.c"
             line="211">Set whether or not we should skip painting @actor.  Workaround for
lack of gjs ability to override _paint vfunc.</doc>
        <source-position filename="../src/cinnamon-generic-container.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="213">A #CinnamonGenericContainer</doc>
            <type name="GenericContainer" c:type="CinnamonGenericContainer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="214">Child #ClutterActor</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="215">%TRUE if we should skip painting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="St.Widget" c:type="StWidget"/>
      </field>
      <field name="priv">
        <type name="GenericContainerPrivate"
              c:type="CinnamonGenericContainerPrivate*"/>
      </field>
      <glib:signal name="allocate" when="last">
        <doc xml:space="preserve"
             filename="../src/cinnamon-generic-container.c"
             line="369">Emitted when @self is allocated, after chaining up to the parent
allocate method.

Note that @box is @self's content box (qv
st_theme_node_get_content_box()), NOT its allocation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="box" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="372">@self's content box</doc>
            <type name="Clutter.ActorBox"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="373">the allocation flags.</doc>
            <type name="Clutter.AllocationFlags"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="get-preferred-height" when="last">
        <doc xml:space="preserve"
             filename="../src/cinnamon-generic-container.c"
             line="345">Emitted when clutter_actor_get_preferred_height() is called
on @self. You should fill in the fields of @alloc with the
your minimum and natural heights. #CinnamonGenericContainer
will deal with taking its borders and padding into account
for you.

@alloc's fields are initialized to 0, so unless you have a fixed
height specified (via #ClutterActor:height or CSS), you must
connect to this signal and fill in the values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="for_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="348">as in clutter_actor_get_preferred_height()</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="alloc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="349">a #CinnamonGenericContainerAllocation to be filled in</doc>
            <type name="GenericContainerAllocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="get-preferred-width" when="last">
        <doc xml:space="preserve"
             filename="../src/cinnamon-generic-container.c"
             line="321">Emitted when clutter_actor_get_preferred_width() is called
on @self. You should fill in the fields of @alloc with the
your minimum and natural widths. #CinnamonGenericContainer
will deal with taking its borders and padding into account
for you.

@alloc's fields are initialized to 0, so unless you have a fixed
width specified (via #ClutterActor:width or CSS), you must
connect to this signal and fill in the values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="for_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="324">as in clutter_actor_get_preferred_width()</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="alloc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-generic-container.c"
                 line="325">a #CinnamonGenericContainerAllocation to be filled in</doc>
            <type name="GenericContainerAllocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="GenericContainerAllocation"
            c:type="CinnamonGenericContainerAllocation"
            glib:type-name="CinnamonGenericContainerAllocation"
            glib:get-type="cinnamon_generic_container_allocation_get_type"
            c:symbol-prefix="generic_container_allocation">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="20"/>
      <field name="min_size" writable="1">
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="natural_size" writable="1">
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="_refcount" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <record name="GenericContainerClass"
            c:type="CinnamonGenericContainerClass"
            glib:is-gtype-struct-for="GenericContainer">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="40"/>
      <field name="parent_class">
        <type name="St.WidgetClass" c:type="StWidgetClass"/>
      </field>
    </record>
    <record name="GenericContainerPrivate"
            c:type="CinnamonGenericContainerPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="28"/>
    </record>
    <class name="Global"
           c:symbol-prefix="global"
           c:type="CinnamonGlobal"
           parent="GObject.Object"
           glib:type-name="CinnamonGlobal"
           glib:get-type="cinnamon_global_get_type"
           glib:type-struct="GlobalClass">
      <source-position filename="../src/cinnamon-global.h" line="26"/>
      <function name="get" c:identifier="cinnamon_global_get">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="466">Gets the singleton global object that represents the desktop.</doc>
        <source-position filename="../src/cinnamon-global.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="471">the singleton global object</doc>
          <type name="Global" c:type="CinnamonGlobal*"/>
        </return-value>
      </function>
      <function name="shutdown" c:identifier="cinnamon_global_shutdown">
        <source-position filename="../src/cinnamon-global.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="alloc_leak" c:identifier="cinnamon_global_alloc_leak">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1639">Request mb megabytes allocated. This is just for debugging.</doc>
        <source-position filename="../src/cinnamon-global.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1641">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="mb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1642">How many mb to leak</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_modal" c:identifier="cinnamon_global_begin_modal">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1056">Grabs the keyboard and mouse to the stage window. The stage will
receive all keyboard and mouse events until cinnamon_global_end_modal()
is called. This is used to implement "modes" for Cinnamon, such as the
overview mode or the "looking glass" debug overlay, that block
application and normal key shortcuts.</doc>
        <source-position filename="../src/cinnamon-global.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="1066">%TRUE if we successfully entered the mode. %FALSE if we couldn't
 enter the mode. Failure may occur because an application has the pointer
 or keyboard grabbed, because Muffin is in a mode itself like moving a
 window or alt-Tab window selection, or because cinnamon_global_begin_modal()
 was previouly called.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1058">a #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="Meta.ModalOptions" c:type="MetaModalOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_work" c:identifier="cinnamon_global_begin_work">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1493">Marks that we are currently doing work. This is used to to track
whether we are busy for the purposes of cinnamon_global_run_at_leisure().
A count is kept and cinnamon_global_end_work() must be called exactly
as many times as cinnamon_global_begin_work().</doc>
        <source-position filename="../src/cinnamon-global.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1495">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_app_launch_context"
              c:identifier="cinnamon_global_create_app_launch_context">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1408">Create a #GAppLaunchContext set up with the correct timestamp, and
targeted to activate on the current workspace.</doc>
        <source-position filename="../src/cinnamon-global.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="1415">A new #GAppLaunchContext</doc>
          <type name="Gio.AppLaunchContext" c:type="GAppLaunchContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1410">A #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_pointer_barrier"
              c:identifier="cinnamon_global_create_pointer_barrier">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1094">If supported by X creates a pointer barrier.</doc>
        <source-position filename="../src/cinnamon-global.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="1105">value you can pass to cinnamon_global_destroy_pointer_barrier()</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1096">a #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="x1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1097">left X coordinate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1098">top Y coordinate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="x2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1099">right X coordinate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1100">bottom Y coordinate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="directions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1101">The directions we're allowed to pass through</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_pointer_barrier"
              c:identifier="cinnamon_global_destroy_pointer_barrier">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1125">Destroys the @barrier created by cinnamon_global_create_pointer_barrier().</doc>
        <source-position filename="../src/cinnamon-global.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1127">a #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="barrier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1128">a pointer barrier</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump_gjs_stack"
              c:identifier="cinnamon_global_dump_gjs_stack">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1038">Prints out the gjs stack</doc>
        <source-position filename="../src/cinnamon-global.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1040">A #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end_modal" c:identifier="cinnamon_global_end_modal">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1081">Undoes the effect of cinnamon_global_begin_modal().</doc>
        <source-position filename="../src/cinnamon-global.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1083">a #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_work" c:identifier="cinnamon_global_end_work">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1508">Marks the end of work that we started with cinnamon_global_begin_work().
If no other work is ongoing and functions have been added with
cinnamon_global_run_at_leisure(), they will be run at the next
opportunity.</doc>
        <source-position filename="../src/cinnamon-global.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1510">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_time"
              c:identifier="cinnamon_global_get_current_time">
        <source-position filename="../src/cinnamon-global.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="1351">the current X server time from the current Clutter, Gdk, or X
event. If called from outside an event handler, this may return
%Clutter.CURRENT_TIME (aka 0), or it may return a slightly
out-of-date timestamp.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1349">A #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display"
              c:identifier="cinnamon_global_get_display"
              glib:get-property="display">
        <source-position filename="../src/cinnamon-global.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="772">The default #MetaDisplay</doc>
          <type name="Meta.Display" c:type="MetaDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gdk_screen"
              c:identifier="cinnamon_global_get_gdk_screen"
              glib:get-property="gdk-screen">
        <source-position filename="../src/cinnamon-global.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="759">Gdk screen object for Cinnamon</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_md5_for_string"
              c:identifier="cinnamon_global_get_md5_for_string">
        <source-position filename="../src/cinnamon-global.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="1400">the MD5 sum for the given string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1398">input string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pid" c:identifier="cinnamon_global_get_pid">
        <source-position filename="../src/cinnamon-global.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="1388">the pid of the cinnamon process.</doc>
          <type name="gint" c:type="pid_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pointer" c:identifier="cinnamon_global_get_pointer">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1224">Gets the pointer coordinates and current modifier key state.
This is a wrapper around gdk_display_get_pointer() that strips
out any un-declared modifier flags, to make gjs happy; see
https://bugzilla.gnome.org/show_bug.cgi?id=597292.</doc>
        <source-position filename="../src/cinnamon-global.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1226">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1227">the X coordinate of the pointer, in global coordinates</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1228">the Y coordinate of the pointer, in global coordinates</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="mods"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1229">the current set of modifier keys that are pressed down</doc>
            <type name="Clutter.ModifierType" c:type="ClutterModifierType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_screen"
              c:identifier="cinnamon_global_get_screen"
              glib:get-property="screen">
        <source-position filename="../src/cinnamon-global.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="748">The default #MetaScreen</doc>
          <type name="Meta.Screen" c:type="MetaScreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settings"
              c:identifier="cinnamon_global_get_settings"
              glib:get-property="settings">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1333">Get the global GSettings instance.</doc>
        <source-position filename="../src/cinnamon-global.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="1339">The GSettings object</doc>
          <type name="Gio.Settings" c:type="GSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1335">A #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stage"
              c:identifier="cinnamon_global_get_stage"
              glib:get-property="stage">
        <source-position filename="../src/cinnamon-global.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="737">The default #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_actors"
              c:identifier="cinnamon_global_get_window_actors">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="780">Gets the list of #MetaWindowActor for the plugin's screen</doc>
        <source-position filename="../src/cinnamon-global.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-global.c"
               line="785">the list of windows</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Meta.WindowActor"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_xdnd" c:identifier="cinnamon_global_init_xdnd">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1196">Enables tracking of Xdnd events</doc>
        <source-position filename="../src/cinnamon-global.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1198">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify_error" c:identifier="cinnamon_global_notify_error">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1166">Show a system error notification.  Use this function
when a user-initiated action results in a non-fatal problem
from causes that may not be under system control.  For
example, an application crash.</doc>
        <source-position filename="../src/cinnamon-global.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1168">a #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="msg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1169">Error message</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1170">Error details</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reexec_self" c:identifier="cinnamon_global_reexec_self">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1142">Restart the current process.  Only intended for development purposes.</doc>
        <source-position filename="../src/cinnamon-global.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1144">A #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run_at_leisure"
              c:identifier="cinnamon_global_run_at_leisure">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1528">Schedules a function to be called the next time Cinnamon is idle.
Idle means here no animations, no redrawing, and no ongoing background
work. Since there is currently no way to hook into the Clutter master
clock and know when is running, the implementation here is somewhat
approximation. Animations done through Cinnamon's Tweener module will
be handled properly, but other animations may be detected as terminating
early if they can be drawn fast enough so that the event loop goes idle
between frames.

The intent of this function is for performance measurement runs
where a number of actions should be run serially and each action is
timed individually. Using this function for other purposes will
interfere with the ability to use it for performance measurement so
should be avoided.</doc>
        <source-position filename="../src/cinnamon-global.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1530">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1531">function to call at leisure</doc>
            <type name="LeisureFunction" c:type="CinnamonLeisureFunction"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1532">data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1533">function to call to free @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="segfault" c:identifier="cinnamon_global_segfault">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1626">Crashes Cinnamon by causing a segfault</doc>
        <source-position filename="../src/cinnamon-global.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1628">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cursor" c:identifier="cinnamon_global_set_cursor">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="551">Set the cursor on the stage window.</doc>
        <source-position filename="../src/cinnamon-global.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="553">A #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="554">the type of the cursor</doc>
            <type name="Cursor" c:type="CinnamonCursor"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pointer" c:identifier="cinnamon_global_set_pointer">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1257">Sets the pointer coordinates.
This is a wrapper around gdk_device_warp().</doc>
        <source-position filename="../src/cinnamon-global.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1259">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1260">the X coordinate of the pointer, in global coordinates</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1261">the Y coordinate of the pointer, in global coordinates</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stage_input_mode"
              c:identifier="cinnamon_global_set_stage_input_mode"
              glib:set-property="stage-input-mode">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="499">Sets the input mode of the stage; when @mode is
%CINNAMON_STAGE_INPUT_MODE_NONREACTIVE, then the stage does not absorb
any clicks, but just passes them through to underlying windows.
When it is %CINNAMON_STAGE_INPUT_MODE_NORMAL, then the stage accepts
clicks in the region defined by
cinnamon_global_set_stage_input_region() but passes through clicks
outside that region. When it is %CINNAMON_STAGE_INPUT_MODE_FULLSCREEN,
the stage absorbs all input.

When the input mode is %CINNAMON_STAGE_INPUT_MODE_FOCUSED, the pointer
is handled as with %CINNAMON_STAGE_INPUT_MODE_NORMAL, but additionally
the stage window has the keyboard focus. If the stage loses the
focus (eg, because the user clicked into a window) the input mode
will revert to %CINNAMON_STAGE_INPUT_MODE_NORMAL.

Note that whenever a muffin-internal Gtk widget has a pointer grab,
Cinnamon behaves as though it was in
%CINNAMON_STAGE_INPUT_MODE_NONREACTIVE, to ensure that the widget gets
any clicks it is expecting.</doc>
        <source-position filename="../src/cinnamon-global.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="501">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="502">the stage input mode</doc>
            <type name="StageInputMode" c:type="CinnamonStageInputMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stage_input_region"
              c:identifier="cinnamon_global_set_stage_input_region">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="690">Sets the area of the stage that is responsive to mouse clicks when
the stage mode is %CINNAMON_STAGE_INPUT_MODE_NORMAL (but does not change the
current stage mode).</doc>
        <source-position filename="../src/cinnamon-global.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="692">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
          <parameter name="rectangles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="693">a list of #MetaRectangle
describing the input region.</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="Meta.Rectangle"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="sync_pointer" c:identifier="cinnamon_global_sync_pointer">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="1282">Ensures that clutter is aware of the current pointer position,
causing enter and leave events to be emitted if the pointer moved
behind our back (ie, during a pointer grab).</doc>
        <source-position filename="../src/cinnamon-global.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="1284">the #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unset_cursor" c:identifier="cinnamon_global_unset_cursor">
        <doc xml:space="preserve"
             filename="../src/cinnamon-global.c"
             line="678">Unset the cursor on the stage window.</doc>
        <source-position filename="../src/cinnamon-global.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="global" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-global.c"
                 line="680">A #CinnamonGlobal</doc>
            <type name="Global" c:type="CinnamonGlobal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="background-actor" transfer-ownership="none">
        <type name="Clutter.Actor"/>
      </property>
      <property name="bottom-window-group" transfer-ownership="none">
        <type name="Clutter.Actor"/>
      </property>
      <property name="datadir" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display" transfer-ownership="none" getter="get_display">
        <type name="Meta.Display"/>
      </property>
      <property name="focus-manager" transfer-ownership="none">
        <type name="St.FocusManager"/>
      </property>
      <property name="gdk-screen"
                transfer-ownership="none"
                getter="get_gdk_screen">
        <type name="Gdk.Screen"/>
      </property>
      <property name="imagedir" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="overlay-group" transfer-ownership="none">
        <type name="Clutter.Actor"/>
      </property>
      <property name="screen" transfer-ownership="none" getter="get_screen">
        <type name="Meta.Screen"/>
      </property>
      <property name="screen-height" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="screen-width" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="session-running"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="settings"
                transfer-ownership="none"
                getter="get_settings">
        <type name="Gio.Settings"/>
      </property>
      <property name="stage" transfer-ownership="none" getter="get_stage">
        <type name="Clutter.Actor"/>
      </property>
      <property name="stage-input-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_stage_input_mode">
        <type name="StageInputMode"/>
      </property>
      <property name="top-window-group" transfer-ownership="none">
        <type name="Clutter.Actor"/>
      </property>
      <property name="ui-scale" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="userdatadir" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="window-group" transfer-ownership="none">
        <type name="Clutter.Actor"/>
      </property>
      <property name="window-manager" transfer-ownership="none">
        <type name="WM"/>
      </property>
      <glib:signal name="notify-error" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scale-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="shutdown" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="xdnd-enter" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="xdnd-leave" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="xdnd-position-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="GlobalClass"
            c:type="CinnamonGlobalClass"
            glib:is-gtype-struct-for="Global">
      <source-position filename="../src/cinnamon-global.h" line="26"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="GtkEmbed"
           c:symbol-prefix="gtk_embed"
           c:type="CinnamonGtkEmbed"
           parent="ClutterX11.TexturePixmap"
           glib:type-name="CinnamonGtkEmbed"
           glib:get-type="cinnamon_gtk_embed_get_type"
           glib:type-struct="GtkEmbedClass">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="30"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <constructor name="new" c:identifier="cinnamon_gtk_embed_new">
        <source-position filename="../src/cinnamon-gtk-embed.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EmbeddedWindow" c:type="CinnamonEmbeddedWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="window"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="EmbeddedWindow"/>
      </property>
      <field name="parent">
        <type name="ClutterX11.TexturePixmap"
              c:type="ClutterX11TexturePixmap"/>
      </field>
      <field name="priv">
        <type name="GtkEmbedPrivate" c:type="CinnamonGtkEmbedPrivate*"/>
      </field>
    </class>
    <record name="GtkEmbedClass"
            c:type="CinnamonGtkEmbedClass"
            glib:is-gtype-struct-for="GtkEmbed">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="30"/>
      <field name="parent_class">
        <type name="ClutterX11.TexturePixmapClass"
              c:type="ClutterX11TexturePixmapClass"/>
      </field>
    </record>
    <record name="GtkEmbedPrivate"
            c:type="CinnamonGtkEmbedPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="18"/>
    </record>
    <function-macro name="IS_APP"
                    c:identifier="CINNAMON_IS_APP"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app.h" line="21"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_APP_CLASS"
                    c:identifier="CINNAMON_IS_APP_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_APP_SYSTEM"
                    c:identifier="CINNAMON_IS_APP_SYSTEM"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app-system.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_APP_SYSTEM_CLASS"
                    c:identifier="CINNAMON_IS_APP_SYSTEM_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-app-system.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOC_SYSTEM"
                    c:identifier="CINNAMON_IS_DOC_SYSTEM"
                    introspectable="0">
      <source-position filename="../src/cinnamon-doc-system.h" line="11"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOC_SYSTEM_CLASS"
                    c:identifier="CINNAMON_IS_DOC_SYSTEM_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-doc-system.h" line="12"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EMBEDDED_WINDOW"
                    c:identifier="CINNAMON_IS_EMBEDDED_WINDOW"
                    introspectable="0">
      <source-position filename="../src/cinnamon-embedded-window.h" line="11"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EMBEDDED_WINDOW_CLASS"
                    c:identifier="CINNAMON_IS_EMBEDDED_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-embedded-window.h" line="12"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GENERIC_CONTAINER"
                    c:identifier="CINNAMON_IS_GENERIC_CONTAINER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="10"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GENERIC_CONTAINER_CLASS"
                    c:identifier="CINNAMON_IS_GENERIC_CONTAINER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-generic-container.h"
                       line="11"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GLOBAL"
                    c:identifier="CINNAMON_IS_GLOBAL"
                    introspectable="0">
      <source-position filename="../src/cinnamon-global.h" line="19"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GLOBAL_CLASS"
                    c:identifier="CINNAMON_IS_GLOBAL_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-global.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GTK_EMBED"
                    c:identifier="CINNAMON_IS_GTK_EMBED"
                    introspectable="0">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="12"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GTK_EMBED_CLASS"
                    c:identifier="CINNAMON_IS_GTK_EMBED_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-gtk-embed.h" line="13"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PERF_LOG"
                    c:identifier="CINNAMON_IS_PERF_LOG"
                    introspectable="0">
      <source-position filename="../src/cinnamon-perf-log.h" line="16"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PERF_LOG_CLASS"
                    c:identifier="CINNAMON_IS_PERF_LOG_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-perf-log.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RECORDER"
                    c:identifier="CINNAMON_IS_RECORDER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-recorder.h" line="25"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_RECORDER_CLASS"
                    c:identifier="CINNAMON_IS_RECORDER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-recorder.h" line="26"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SCREENSHOT"
                    c:identifier="CINNAMON_IS_SCREENSHOT"
                    introspectable="0">
      <source-position filename="../src/cinnamon-screenshot.h" line="20"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SCREENSHOT_CLASS"
                    c:identifier="CINNAMON_IS_SCREENSHOT_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-screenshot.h" line="21"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SLICER"
                    c:identifier="CINNAMON_IS_SLICER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-slicer.h" line="10"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SLICER_CLASS"
                    c:identifier="CINNAMON_IS_SLICER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-slicer.h" line="11"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STACK"
                    c:identifier="CINNAMON_IS_STACK"
                    introspectable="0">
      <source-position filename="../src/cinnamon-stack.h" line="11"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STACK_CLASS"
                    c:identifier="CINNAMON_IS_STACK_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-stack.h" line="12"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRAY_ICON"
                    c:identifier="CINNAMON_IS_TRAY_ICON"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-icon.h" line="10"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRAY_ICON_CLASS"
                    c:identifier="CINNAMON_IS_TRAY_ICON_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-icon.h" line="11"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRAY_MANAGER"
                    c:identifier="CINNAMON_IS_TRAY_MANAGER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-manager.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TRAY_MANAGER_CLASS"
                    c:identifier="CINNAMON_IS_TRAY_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-manager.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WINDOW_TRACKER"
                    c:identifier="CINNAMON_IS_WINDOW_TRACKER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-window-tracker.h" line="21"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WINDOW_TRACKER_CLASS"
                    c:identifier="CINNAMON_IS_WINDOW_TRACKER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-window-tracker.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WM"
                    c:identifier="CINNAMON_IS_WM"
                    introspectable="0">
      <source-position filename="../src/cinnamon-wm.h" line="16"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WM_CLASS"
                    c:identifier="CINNAMON_IS_WM_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-wm.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_XFIXES_CURSOR"
                    c:identifier="CINNAMON_IS_XFIXES_CURSOR"
                    introspectable="0">
      <source-position filename="../src/cinnamon-xfixes-cursor.h" line="16"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_XFIXES_CURSOR_CLASS"
                    c:identifier="CINNAMON_IS_XFIXES_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-xfixes-cursor.h" line="17"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <callback name="LeisureFunction" c:type="CinnamonLeisureFunction">
      <source-position filename="../src/cinnamon-global.h" line="106"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="PERF_LOG"
                    c:identifier="CINNAMON_PERF_LOG"
                    introspectable="0">
      <source-position filename="../src/cinnamon-perf-log.h" line="14"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PERF_LOG_CLASS"
                    c:identifier="CINNAMON_PERF_LOG_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-perf-log.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PERF_LOG_GET_CLASS"
                    c:identifier="CINNAMON_PERF_LOG_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-perf-log.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="PerfLog"
           c:symbol-prefix="perf_log"
           c:type="CinnamonPerfLog"
           parent="GObject.Object"
           glib:type-name="CinnamonPerfLog"
           glib:get-type="cinnamon_perf_log_get_type"
           glib:type-struct="PerfLogClass">
      <source-position filename="../src/cinnamon-perf-log.h" line="11"/>
      <function name="get_default"
                c:identifier="cinnamon_perf_log_get_default">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="175">Gets the global singleton performance log. This is initially disabled
and must be explicitly enabled with cinnamon_perf_log_set_enabled().</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-perf-log.c"
               line="181">the global singleton performance log</doc>
          <type name="PerfLog" c:type="CinnamonPerfLog*"/>
        </return-value>
      </function>
      <method name="add_statistics_callback"
              c:identifier="cinnamon_perf_log_add_statistics_callback">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="595">Adds a function that will be called before statistics are recorded.
The function would typically compute one or more statistics values
and call a function such as cinnamon_perf_log_update_statistic_i()
to update the value that will be recorded.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="597">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="598">function to call before recording statistics</doc>
            <type name="PerfStatisticsCallback"
                  c:type="CinnamonPerfStatisticsCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="599">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="600">function to call when @user_data is no longer needed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="collect_statistics"
              c:identifier="cinnamon_perf_log_collect_statistics">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="622">Calls all the update functions added with
cinnamon_perf_log_add_statistics_callback() and then records events
for all statistics, followed by a perf.statisticsCollected event.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="624">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="define_event"
              c:identifier="cinnamon_perf_log_define_event">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="286">Defines a performance event for later recording.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="288">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="289">name of the event. This should of the form
  '&lt;namespace&gt;.&lt;specific event&gt;', for example
  'clutter.stagePaintDone'.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="292">human readable description of the event.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="293">signature defining the arguments that event takes.
  This is a string of type characters, using the same characters
  as D-Bus or GVariant. Only a very limited number of signatures
  are supported: , '', 's', 'i', and 'x'. This mean respectively:
  no arguments, one string, one 32-bit integer, and one 64-bit
  integer.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="define_statistic"
              c:identifier="cinnamon_perf_log_define_statistic">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="476">Defines a statistic. A statistic is a numeric value that is stored
by the performance log and recorded periodically or when
cinnamon_perf_log_collect_statistics() is called explicitly.

Code that defines a statistic should update it by calling
the update function for the particular data type of the statistic,
such as cinnamon_perf_log_update_statistic_i(). This can be done
at any time, but would normally done inside a function registered
with cinnamon_perf_log_add_statistics_callback(). These functions
are called immediately before statistics are recorded.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="478">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="479">name of the statistic and of the corresponding event.
 This should follow the same guidelines as for cinnamon_perf_log_define_event()</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="481">human readable description of the statistic.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="482">The type of the data stored for statistic. Must
 currently be 'i' or 'x'.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump_events"
              c:identifier="cinnamon_perf_log_dump_events"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="809">Dump the definition of currently defined events and statistics, formatted
as JSON, to the specified output stream. The JSON output is an array,
with each element being a dictionary of the form:

{ name: &lt;name of event&gt;,
  description: &lt;descrition of string,
  statistic: true } (only for statistics)</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-perf-log.c"
               line="823">%TRUE if the dump succeeded. %FALSE if an IO error occurred</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="811">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="812">output stream into which to write the event definitions</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump_log"
              c:identifier="cinnamon_perf_log_dump_log"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="930">Writes the performance event log, formatted as JSON, to the specified
output stream. For performance reasons, the output stream passed
in should generally be a buffered (or memory) output stream, since
it will be written to in small pieces. The JSON output is an array
with the elements of the array also being arrays, of the form
'[' &lt;time&gt;, &lt;event name&gt; [, &lt;event_arg&gt;... ] ']'.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-perf-log.c"
               line="943">%TRUE if the dump succeeded. %FALSE if an IO error occurred</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="932">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="out" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="933">output stream into which to write the event log</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
        </parameters>
      </method>
      <method name="event" c:identifier="cinnamon_perf_log_event">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="395">Records a performance event with no arguments.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="397">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="398">name of the event</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="event_i" c:identifier="cinnamon_perf_log_event_i">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="413">Records a performance event with one 32-bit integer argument.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="415">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="416">name of the event</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="arg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="417">the argument</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="event_s" c:identifier="cinnamon_perf_log_event_s">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="455">Records a performance event with one string argument.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="457">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="458">name of the event</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="arg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="459">the argument</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="event_x" c:identifier="cinnamon_perf_log_event_x">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="434">Records a performance event with one 64-bit integer argument.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="436">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="437">name of the event</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="arg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="438">the argument</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="replay" c:identifier="cinnamon_perf_log_replay">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="692">Replays the log by calling the given function for each event
in the log.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="694">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="replay_function"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="695">function to call for each event in the log</doc>
            <type name="PerfReplayFunction"
                  c:type="CinnamonPerfReplayFunction"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="696">data to pass to @replay_function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="cinnamon_perf_log_set_enabled">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="204">Sets whether events are currently being recorded.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="206">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="207">whether to record events</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_statistic_i"
              c:identifier="cinnamon_perf_log_update_statistic_i">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="549">Updates the current value of an 32-bit integer statistic.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="551">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="552">name of the statistic</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="553">new value for the statistic</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_statistic_x"
              c:identifier="cinnamon_perf_log_update_statistic_x">
        <doc xml:space="preserve"
             filename="../src/cinnamon-perf-log.c"
             line="572">Updates the current value of an 64-bit integer statistic.</doc>
        <source-position filename="../src/cinnamon-perf-log.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="perf_log" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="574">a #CinnamonPerfLog</doc>
            <type name="PerfLog" c:type="CinnamonPerfLog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="575">name of the statistic</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-perf-log.c"
                 line="576">new value for the statistic</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="PerfLogClass"
            c:type="CinnamonPerfLogClass"
            disguised="1"
            glib:is-gtype-struct-for="PerfLog">
      <source-position filename="../src/cinnamon-perf-log.h" line="11"/>
    </record>
    <callback name="PerfReplayFunction" c:type="CinnamonPerfReplayFunction">
      <source-position filename="../src/cinnamon-perf-log.h" line="65"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="time" transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="signature" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="arg" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PerfStatisticsCallback"
              c:type="CinnamonPerfStatisticsCallback">
      <source-position filename="../src/cinnamon-perf-log.h" line="55"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="perf_log" transfer-ownership="none">
          <type name="PerfLog" c:type="CinnamonPerfLog*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="RECORDER"
                    c:identifier="CINNAMON_RECORDER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-recorder.h" line="23"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RECORDER_CLASS"
                    c:identifier="CINNAMON_RECORDER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-recorder.h" line="24"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RECORDER_GET_CLASS"
                    c:identifier="CINNAMON_RECORDER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-recorder.h" line="27"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Recorder"
           c:symbol-prefix="recorder"
           c:type="CinnamonRecorder"
           parent="GObject.Object"
           glib:type-name="CinnamonRecorder"
           glib:get-type="cinnamon_recorder_get_type"
           glib:type-struct="RecorderClass">
      <source-position filename="../src/cinnamon-recorder.h" line="20"/>
      <constructor name="new" c:identifier="cinnamon_recorder_new">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1606">Create a new #CinnamonRecorder to record movies of a #ClutterStage</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="31"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-recorder.c"
               line="1612">The newly created #CinnamonRecorder object</doc>
          <type name="Recorder" c:type="CinnamonRecorder*"/>
        </return-value>
        <parameters>
          <parameter name="stage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1608">The #ClutterStage</doc>
            <type name="Clutter.Stage" c:type="ClutterStage*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="close" c:identifier="cinnamon_recorder_close">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1820">Stops recording. It's possible to call cinnamon_recorder_record()
again to reopen a new recording stream, but unless change the
recording filename, this may result in the old recording being
overwritten.</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1822">the #CinnamonRecorder</doc>
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_recording"
              c:identifier="cinnamon_recorder_is_recording">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1851">Determine if recording is currently in progress. (The recorder
is not paused or closed.)</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-recorder.c"
               line="1857">%TRUE if the recorder is currently recording.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pause" c:identifier="cinnamon_recorder_pause">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1782">Temporarily stop recording. If the specified filename includes
the %c escape, then the stream is closed and a new stream with
an incremented counter will be created. Otherwise the stream
is paused and will be continued when cinnamon_recorder_record()
is next called.</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1784">the #CinnamonRecorder</doc>
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="record" c:identifier="cinnamon_recorder_record">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1724">Starts recording, or continues a recording that was previously
paused. Starting the recording may fail if the output file
cannot be opened, or if the output stream cannot be created
for other reasons. In that case a warning is printed to
stderr. There is no way currently to get details on how
recording failed to start.

An extra reference count is added to the recorder if recording
is successfully started; the recording object will not be freed
until recording is stopped even if the creator no longer holds
a reference. Recording is automatically stopped if the stage
is destroyed.</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-recorder.c"
               line="1741">%TRUE if recording was successfully started</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1726">the #CinnamonRecorder</doc>
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_area" c:identifier="cinnamon_recorder_set_area">
        <source-position filename="../src/cinnamon-recorder.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename"
              c:identifier="cinnamon_recorder_set_filename"
              glib:set-property="filename">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1640">Sets the filename that will be used when creating output
files. This is only used if the configured pipeline has an
unconnected source pad (as the default pipeline does). If
the pipeline is complete, then the filename is unused. The
provided string is used as a template.It can contain
the following escapes:

%d: The current date as YYYYYMMDD
%u: A string added to make the filename unique.
    '', 'a', 'b', ... 'aa', 'ab', ..
%c: A counter that is updated (opening a new file) each
    time the recording stream is paused.
%%: A literal percent

The default value is 'cinnamon-%d%u-%c.ogg'.</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1642">the #CinnamonRecorder</doc>
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1643">the filename template to use for output files,
           or %NULL for the defalt value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_framerate"
              c:identifier="cinnamon_recorder_set_framerate"
              glib:set-property="framerate">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1622">Sets the number of frames per second we configure for the GStreamer pipeline.

The default value is 15.</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1624">the #CinnamonRecorder</doc>
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
          <parameter name="framerate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1625">Framerate used for resulting video in frames-per-second.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pipeline"
              c:identifier="cinnamon_recorder_set_pipeline"
              glib:set-property="pipeline">
        <doc xml:space="preserve"
             filename="../src/cinnamon-recorder.c"
             line="1672">Sets the GStreamer pipeline used to encode recordings.
It follows the syntax used for gst-launch. The pipeline
should have an unconnected sink pad where the recorded
video is recorded. It will normally have a unconnected
source pad; output from that pad will be written into the
output file. (See cinnamon_recorder_set_filename().) However
the pipeline can also take care of its own output - this
might be used to send the output to an icecast server
via shout2send or similar.

The default value is 'vp8enc min_quantizer=13 max_quantizer=13 cpu-used=5 deadline=1000000 threads=%T ! queue ! webmmux'</doc>
        <source-position filename="../src/cinnamon-recorder.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="recorder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1674">the #CinnamonRecorder</doc>
            <type name="Recorder" c:type="CinnamonRecorder*"/>
          </instance-parameter>
          <parameter name="pipeline"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-recorder.c"
                 line="1675">the GStreamer pipeline used to encode recordings
           or %NULL for the default value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="filename"
                writable="1"
                transfer-ownership="none"
                setter="set_filename">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="framerate"
                writable="1"
                transfer-ownership="none"
                setter="set_framerate">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pipeline"
                writable="1"
                transfer-ownership="none"
                setter="set_pipeline">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="stage" writable="1" transfer-ownership="none">
        <type name="Clutter.Stage"/>
      </property>
    </class>
    <record name="RecorderClass"
            c:type="CinnamonRecorderClass"
            disguised="1"
            glib:is-gtype-struct-for="Recorder">
      <source-position filename="../src/cinnamon-recorder.h" line="20"/>
    </record>
    <function-macro name="SCREENSHOT"
                    c:identifier="CINNAMON_SCREENSHOT"
                    introspectable="0">
      <source-position filename="../src/cinnamon-screenshot.h" line="18"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SCREENSHOT_CLASS"
                    c:identifier="CINNAMON_SCREENSHOT_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-screenshot.h" line="19"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SCREENSHOT_GET_CLASS"
                    c:identifier="CINNAMON_SCREENSHOT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-screenshot.h" line="22"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SLICER"
                    c:identifier="CINNAMON_SLICER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-slicer.h" line="8"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SLICER_CLASS"
                    c:identifier="CINNAMON_SLICER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-slicer.h" line="9"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SLICER_GET_CLASS"
                    c:identifier="CINNAMON_SLICER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-slicer.h" line="12"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STACK"
                    c:identifier="CINNAMON_STACK"
                    introspectable="0">
      <source-position filename="../src/cinnamon-stack.h" line="9"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STACK_CLASS"
                    c:identifier="CINNAMON_STACK_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-stack.h" line="10"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STACK_GET_CLASS"
                    c:identifier="CINNAMON_STACK_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-stack.h" line="13"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Screenshot"
           c:symbol-prefix="screenshot"
           c:type="CinnamonScreenshot"
           parent="GObject.Object"
           glib:type-name="CinnamonScreenshot"
           glib:get-type="cinnamon_screenshot_get_type"
           glib:type-struct="ScreenshotClass">
      <source-position filename="../src/cinnamon-screenshot.h" line="15"/>
      <constructor name="new" c:identifier="cinnamon_screenshot_new">
        <source-position filename="../src/cinnamon-screenshot.h" line="26"/>
        <return-value transfer-ownership="full">
          <type name="Screenshot" c:type="CinnamonScreenshot*"/>
        </return-value>
      </constructor>
      <method name="screenshot" c:identifier="cinnamon_screenshot_screenshot">
        <doc xml:space="preserve"
             filename="../src/cinnamon-screenshot.c"
             line="266">Takes a screenshot of the whole screen
in @filename as png image.</doc>
        <source-position filename="../src/cinnamon-screenshot.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="268">the #CinnamonScreenshot</doc>
            <type name="Screenshot" c:type="CinnamonScreenshot*"/>
          </instance-parameter>
          <parameter name="include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="269">Whether to include the cursor or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="270">The filename for the screenshot</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="271">function to call returning success or failure
of the async grabbing</doc>
            <type name="ScreenshotCallback"
                  c:type="CinnamonScreenshotCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="screenshot_area"
              c:identifier="cinnamon_screenshot_screenshot_area">
        <doc xml:space="preserve"
             filename="../src/cinnamon-screenshot.c"
             line="299">Takes a screenshot of the passed in area and saves it
in @filename as png image.</doc>
        <source-position filename="../src/cinnamon-screenshot.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="301">the #CinnamonScreenshot</doc>
            <type name="Screenshot" c:type="CinnamonScreenshot*"/>
          </instance-parameter>
          <parameter name="include_cursor" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="302">The X coordinate of the area</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="303">The Y coordinate of the area</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="304">The width of the area</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="305">The height of the area</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="306">The filename for the screenshot</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="307">function to call returning success or failure
of the async grabbing</doc>
            <type name="ScreenshotCallback"
                  c:type="CinnamonScreenshotCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="screenshot_window"
              c:identifier="cinnamon_screenshot_screenshot_window">
        <doc xml:space="preserve"
             filename="../src/cinnamon-screenshot.c"
             line="343">Takes a screenshot of the focused window (optionally omitting the frame)
in @filename as png image.</doc>
        <source-position filename="../src/cinnamon-screenshot.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="345">the #CinnamonScreenshot</doc>
            <type name="Screenshot" c:type="CinnamonScreenshot*"/>
          </instance-parameter>
          <parameter name="include_frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="346">Whether to include the frame or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="347">Whether to include the cursor or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="348">The filename for the screenshot</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-screenshot.c"
                 line="349">function to call returning success or failure
of the async grabbing</doc>
            <type name="ScreenshotCallback"
                  c:type="CinnamonScreenshotCallback"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <callback name="ScreenshotCallback" c:type="CinnamonScreenshotCallback">
      <source-position filename="../src/cinnamon-screenshot.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="screenshot" transfer-ownership="none">
          <type name="Screenshot" c:type="CinnamonScreenshot*"/>
        </parameter>
        <parameter name="success" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="screenshot_area" transfer-ownership="none">
          <type name="cairo.RectangleInt" c:type="cairo_rectangle_int_t*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ScreenshotClass"
            c:type="CinnamonScreenshotClass"
            disguised="1"
            glib:is-gtype-struct-for="Screenshot">
      <source-position filename="../src/cinnamon-screenshot.h" line="15"/>
    </record>
    <class name="Slicer"
           c:symbol-prefix="slicer"
           c:type="CinnamonSlicer"
           parent="St.Bin"
           glib:type-name="CinnamonSlicer"
           glib:get-type="cinnamon_slicer_get_type"
           glib:type-struct="SlicerClass">
      <source-position filename="../src/cinnamon-slicer.h" line="29"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <field name="parent">
        <type name="St.Bin" c:type="StBin"/>
      </field>
      <field name="priv">
        <type name="SlicerPrivate" c:type="CinnamonSlicerPrivate*"/>
      </field>
    </class>
    <record name="SlicerClass"
            c:type="CinnamonSlicerClass"
            glib:is-gtype-struct-for="Slicer">
      <source-position filename="../src/cinnamon-slicer.h" line="29"/>
      <field name="parent_class">
        <type name="St.BinClass" c:type="StBinClass"/>
      </field>
    </record>
    <record name="SlicerPrivate" c:type="CinnamonSlicerPrivate" disguised="1">
      <source-position filename="../src/cinnamon-slicer.h" line="17"/>
    </record>
    <class name="Stack"
           c:symbol-prefix="stack"
           c:type="CinnamonStack"
           parent="St.Widget"
           glib:type-name="CinnamonStack"
           glib:get-type="cinnamon_stack_get_type"
           glib:type-struct="StackClass">
      <source-position filename="../src/cinnamon-stack.h" line="30"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <field name="parent">
        <type name="St.Widget" c:type="StWidget"/>
      </field>
      <field name="priv">
        <type name="StackPrivate" c:type="CinnamonStackPrivate*"/>
      </field>
    </class>
    <record name="StackClass"
            c:type="CinnamonStackClass"
            glib:is-gtype-struct-for="Stack">
      <source-position filename="../src/cinnamon-stack.h" line="30"/>
      <field name="parent_class">
        <type name="St.WidgetClass" c:type="StWidgetClass"/>
      </field>
    </record>
    <record name="StackPrivate" c:type="CinnamonStackPrivate" disguised="1">
      <source-position filename="../src/cinnamon-stack.h" line="18"/>
    </record>
    <enumeration name="StageInputMode"
                 glib:type-name="CinnamonStageInputMode"
                 glib:get-type="cinnamon_stage_input_mode_get_type"
                 c:type="CinnamonStageInputMode">
      <member name="nonreactive"
              value="0"
              c:identifier="CINNAMON_STAGE_INPUT_MODE_NONREACTIVE"
              glib:nick="nonreactive"
              glib:name="CINNAMON_STAGE_INPUT_MODE_NONREACTIVE">
      </member>
      <member name="normal"
              value="1"
              c:identifier="CINNAMON_STAGE_INPUT_MODE_NORMAL"
              glib:nick="normal"
              glib:name="CINNAMON_STAGE_INPUT_MODE_NORMAL">
      </member>
      <member name="focused"
              value="2"
              c:identifier="CINNAMON_STAGE_INPUT_MODE_FOCUSED"
              glib:nick="focused"
              glib:name="CINNAMON_STAGE_INPUT_MODE_FOCUSED">
      </member>
      <member name="fullscreen"
              value="3"
              c:identifier="CINNAMON_STAGE_INPUT_MODE_FULLSCREEN"
              glib:nick="fullscreen"
              glib:name="CINNAMON_STAGE_INPUT_MODE_FULLSCREEN">
      </member>
    </enumeration>
    <record name="StartupSequence"
            c:type="CinnamonStartupSequence"
            glib:type-name="CinnamonStartupSequence"
            glib:get-type="cinnamon_startup_sequence_get_type"
            c:symbol-prefix="startup_sequence">
      <source-position filename="../src/cinnamon-window-tracker.h" line="43"/>
      <method name="create_icon"
              c:identifier="cinnamon_startup_sequence_create_icon">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-window-tracker.c"
               line="1013">A new #ClutterTexture containing an icon for the sequence</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <type name="StartupSequence" c:type="CinnamonStartupSequence*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-window-tracker.c"
                 line="1011">Size in pixels of icon</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app" c:identifier="cinnamon_startup_sequence_get_app">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-window-tracker.c"
               line="975">The application being launched, or %NULL if unknown.</doc>
          <type name="App" c:type="CinnamonApp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-window-tracker.c"
                 line="973">A #CinnamonStartupSequence</doc>
            <type name="StartupSequence" c:type="CinnamonStartupSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_completed"
              c:identifier="cinnamon_startup_sequence_get_completed">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <type name="StartupSequence" c:type="CinnamonStartupSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="cinnamon_startup_sequence_get_id">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <type name="StartupSequence" c:type="CinnamonStartupSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="cinnamon_startup_sequence_get_name">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <type name="StartupSequence" c:type="CinnamonStartupSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="TRAY_ICON"
                    c:identifier="CINNAMON_TRAY_ICON"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-icon.h" line="8"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRAY_ICON_CLASS"
                    c:identifier="CINNAMON_TRAY_ICON_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-icon.h" line="9"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRAY_ICON_GET_CLASS"
                    c:identifier="CINNAMON_TRAY_ICON_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-icon.h" line="12"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRAY_MANAGER"
                    c:identifier="CINNAMON_TRAY_MANAGER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-manager.h" line="12"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRAY_MANAGER_CLASS"
                    c:identifier="CINNAMON_TRAY_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-manager.h" line="13"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TRAY_MANAGER_GET_CLASS"
                    c:identifier="CINNAMON_TRAY_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-tray-manager.h" line="16"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="TrayIcon"
           c:symbol-prefix="tray_icon"
           c:type="CinnamonTrayIcon"
           parent="GtkEmbed"
           glib:type-name="CinnamonTrayIcon"
           glib:get-type="cinnamon_tray_icon_get_type"
           glib:type-struct="TrayIconClass">
      <source-position filename="../src/cinnamon-tray-icon.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <constructor name="new" c:identifier="cinnamon_tray_icon_new">
        <source-position filename="../src/cinnamon-tray-icon.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EmbeddedWindow" c:type="CinnamonEmbeddedWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="click" c:identifier="cinnamon_tray_icon_click">
        <doc xml:space="preserve"
             filename="../src/cinnamon-tray-icon.c"
             line="173">Fakes a press and release on @icon. @event must be a
%CLUTTER_BUTTON_RELEASE event. Its relevant details will be passed
on to the icon, but its coordinates will be ignored; the click is
always made on the center of @icon.</doc>
        <source-position filename="../src/cinnamon-tray-icon.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-tray-icon.c"
                 line="175">a #CinnamonTrayIcon</doc>
            <type name="TrayIcon" c:type="CinnamonTrayIcon*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-tray-icon.c"
                 line="176">the #ClutterEvent triggering the fake click</doc>
            <type name="Clutter.Event" c:type="ClutterEvent*"/>
          </parameter>
        </parameters>
      </method>
      <property name="pid" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="title" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wm-class" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GtkEmbed" c:type="CinnamonGtkEmbed"/>
      </field>
      <field name="priv">
        <type name="TrayIconPrivate" c:type="CinnamonTrayIconPrivate*"/>
      </field>
    </class>
    <record name="TrayIconClass"
            c:type="CinnamonTrayIconClass"
            glib:is-gtype-struct-for="TrayIcon">
      <source-position filename="../src/cinnamon-tray-icon.h" line="28"/>
      <field name="parent_class">
        <type name="GtkEmbedClass" c:type="CinnamonGtkEmbedClass"/>
      </field>
    </record>
    <record name="TrayIconPrivate"
            c:type="CinnamonTrayIconPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-tray-icon.h" line="16"/>
    </record>
    <class name="TrayManager"
           c:symbol-prefix="tray_manager"
           c:type="CinnamonTrayManager"
           parent="GObject.Object"
           glib:type-name="CinnamonTrayManager"
           glib:get-type="cinnamon_tray_manager_get_type"
           glib:type-struct="TrayManagerClass">
      <source-position filename="../src/cinnamon-tray-manager.h" line="39"/>
      <constructor name="new" c:identifier="cinnamon_tray_manager_new">
        <source-position filename="../src/cinnamon-tray-manager.h" line="43"/>
        <return-value transfer-ownership="full">
          <type name="TrayManager" c:type="CinnamonTrayManager*"/>
        </return-value>
      </constructor>
      <virtual-method name="tray_icon_added">
        <source-position filename="../src/cinnamon-tray-manager.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="TrayManager" c:type="CinnamonTrayManager*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
          <parameter name="lowercase_wm_class" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tray_icon_removed">
        <source-position filename="../src/cinnamon-tray-manager.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="TrayManager" c:type="CinnamonTrayManager*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="manage_stage"
              c:identifier="cinnamon_tray_manager_manage_stage">
        <source-position filename="../src/cinnamon-tray-manager.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="TrayManager" c:type="CinnamonTrayManager*"/>
          </instance-parameter>
          <parameter name="stage" transfer-ownership="none">
            <type name="Clutter.Stage" c:type="ClutterStage*"/>
          </parameter>
          <parameter name="theme_widget" transfer-ownership="none">
            <type name="St.Widget" c:type="StWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="redisplay" c:identifier="cinnamon_tray_manager_redisplay">
        <source-position filename="../src/cinnamon-tray-manager.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="TrayManager" c:type="CinnamonTrayManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_orientation"
              c:identifier="cinnamon_tray_manager_set_orientation">
        <source-position filename="../src/cinnamon-tray-manager.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="TrayManager" c:type="CinnamonTrayManager*"/>
          </instance-parameter>
          <parameter name="orientation" transfer-ownership="none">
            <type name="Clutter.Orientation" c:type="ClutterOrientation"/>
          </parameter>
        </parameters>
      </method>
      <property name="bg-color"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Clutter.Color"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TrayManagerPrivate" c:type="CinnamonTrayManagerPrivate*"/>
      </field>
      <glib:signal name="tray-icon-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Clutter.Actor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tray-icon-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Clutter.Actor"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TrayManagerClass"
            c:type="CinnamonTrayManagerClass"
            glib:is-gtype-struct-for="TrayManager">
      <source-position filename="../src/cinnamon-tray-manager.h" line="39"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="tray_icon_added">
        <callback name="tray_icon_added">
          <source-position filename="../src/cinnamon-tray-manager.h"
                           line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="TrayManager" c:type="CinnamonTrayManager*"/>
            </parameter>
            <parameter name="icon" transfer-ownership="none">
              <type name="Clutter.Actor" c:type="ClutterActor*"/>
            </parameter>
            <parameter name="lowercase_wm_class" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tray_icon_removed">
        <callback name="tray_icon_removed">
          <source-position filename="../src/cinnamon-tray-manager.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="TrayManager" c:type="CinnamonTrayManager*"/>
            </parameter>
            <parameter name="icon" transfer-ownership="none">
              <type name="Clutter.Actor" c:type="ClutterActor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TrayManagerPrivate"
            c:type="CinnamonTrayManagerPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-tray-manager.h" line="19"/>
    </record>
    <function-macro name="WINDOW_TRACKER"
                    c:identifier="CINNAMON_WINDOW_TRACKER"
                    introspectable="0">
      <source-position filename="../src/cinnamon-window-tracker.h" line="19"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WINDOW_TRACKER_CLASS"
                    c:identifier="CINNAMON_WINDOW_TRACKER_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-window-tracker.h" line="20"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WINDOW_TRACKER_GET_CLASS"
                    c:identifier="CINNAMON_WINDOW_TRACKER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-window-tracker.h" line="23"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="WM"
           c:symbol-prefix="wm"
           c:type="CinnamonWM"
           parent="GObject.Object"
           glib:type-name="CinnamonWM"
           glib:get-type="cinnamon_wm_get_type"
           glib:type-struct="WMClass">
      <source-position filename="../src/cinnamon-wm.h" line="24"/>
      <constructor name="new"
                   c:identifier="cinnamon_wm_new"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="370">Creates a new window management interface by hooking into @plugin.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="28"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-wm.c"
               line="376">the new window-management interface</doc>
          <type name="WM" c:type="CinnamonWM*"/>
        </return-value>
        <parameters>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="372">the #MetaPlugin</doc>
            <type name="Meta.Plugin" c:type="MetaPlugin*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="completed_destroy"
              c:identifier="cinnamon_wm_completed_destroy">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="262">The plugin must call this when it has completed a window destroy effect.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="264">the CinnamonWM</doc>
            <type name="WM" c:type="CinnamonWM*"/>
          </instance-parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="265">the MetaWindowActor actor</doc>
            <type name="Meta.WindowActor" c:type="MetaWindowActor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="completed_map" c:identifier="cinnamon_wm_completed_map">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="248">The plugin must call this when it has completed a window map effect.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="250">the CinnamonWM</doc>
            <type name="WM" c:type="CinnamonWM*"/>
          </instance-parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="251">the MetaWindowActor actor</doc>
            <type name="Meta.WindowActor" c:type="MetaWindowActor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="completed_maximize"
              c:identifier="cinnamon_wm_completed_maximize">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="205">The plugin must call this when it has completed a window maximize effect.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="207">the CinnamonWM</doc>
            <type name="WM" c:type="CinnamonWM*"/>
          </instance-parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="208">the MetaWindowActor actor</doc>
            <type name="Meta.WindowActor" c:type="MetaWindowActor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="completed_minimize"
              c:identifier="cinnamon_wm_completed_minimize">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="191">The plugin must call this when it has completed a window minimize effect.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="193">the CinnamonWM</doc>
            <type name="WM" c:type="CinnamonWM*"/>
          </instance-parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="194">the MetaWindowActor actor</doc>
            <type name="Meta.WindowActor" c:type="MetaWindowActor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="completed_switch_workspace"
              c:identifier="cinnamon_wm_completed_switch_workspace">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="177">The plugin must call this when it has finished switching the
workspace.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="179">the CinnamonWM</doc>
            <type name="WM" c:type="CinnamonWM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="completed_tile" c:identifier="cinnamon_wm_completed_tile">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="219">The plugin must call this when it has completed a window tile effect.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="221">the CinnamonWM</doc>
            <type name="WM" c:type="CinnamonWM*"/>
          </instance-parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="222">the MetaWindowActor actor</doc>
            <type name="Meta.WindowActor" c:type="MetaWindowActor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="completed_unmaximize"
              c:identifier="cinnamon_wm_completed_unmaximize">
        <doc xml:space="preserve"
             filename="../src/cinnamon-wm.c"
             line="234">The plugin must call this when it has completed a window unmaximize effect.</doc>
        <source-position filename="../src/cinnamon-wm.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="236">the CinnamonWM</doc>
            <type name="WM" c:type="CinnamonWM*"/>
          </instance-parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-wm.c"
                 line="237">the MetaWindowActor actor</doc>
            <type name="Meta.WindowActor" c:type="MetaWindowActor*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="destroy" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.WindowActor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hide-hud-preview" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hide-tile-preview" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="kill-window-effects" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.WindowActor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="map" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.WindowActor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="maximize" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.WindowActor"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="minimize" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.WindowActor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show-hud-preview" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Meta.Rectangle"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show-tile-preview" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.Window"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Meta.Rectangle"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="switch-workspace" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="switch-workspace-complete" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="tile" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.WindowActor"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unmaximize" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.WindowActor"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WMClass"
            c:type="CinnamonWMClass"
            glib:is-gtype-struct-for="WM">
      <source-position filename="../src/cinnamon-wm.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="WM_CLASS"
                    c:identifier="CINNAMON_WM_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-wm.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WM_GET_CLASS"
                    c:identifier="CINNAMON_WM_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-wm.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="WindowTracker"
           c:symbol-prefix="window_tracker"
           c:type="CinnamonWindowTracker"
           parent="GObject.Object"
           glib:type-name="CinnamonWindowTracker"
           glib:get-type="cinnamon_window_tracker_get_type"
           glib:type-struct="WindowTrackerClass">
      <source-position filename="../src/cinnamon-window-tracker.h" line="28"/>
      <function name="get_default"
                c:identifier="cinnamon_window_tracker_get_default">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-window-tracker.c"
               line="1049">The global #CinnamonWindowTracker instance</doc>
          <type name="WindowTracker" c:type="CinnamonWindowTracker*"/>
        </return-value>
      </function>
      <method name="get_app_from_pid"
              c:identifier="cinnamon_window_tracker_get_app_from_pid">
        <doc xml:space="preserve"
             filename="../src/cinnamon-window-tracker.c"
             line="828">@self; A #CinnamonAppSystem
Look up the application corresponding to a process.</doc>
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-window-tracker.c"
               line="835">A #CinnamonApp, or %NULL if none</doc>
          <type name="App" c:type="CinnamonApp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tracker" transfer-ownership="none">
            <type name="WindowTracker" c:type="CinnamonWindowTracker*"/>
          </instance-parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-window-tracker.c"
                 line="831">A Unix process identifier</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_startup_sequences"
              c:identifier="cinnamon_window_tracker_get_startup_sequences">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-window-tracker.c"
               line="935">Currently active startup sequences</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="StartupSequence"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="tracker" transfer-ownership="none">
            <type name="WindowTracker" c:type="CinnamonWindowTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_app"
              c:identifier="cinnamon_window_tracker_get_window_app">
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-window-tracker.c"
               line="807">Application associated with window</doc>
          <type name="App" c:type="CinnamonApp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tracker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-window-tracker.c"
                 line="804">An app monitor instance</doc>
            <type name="WindowTracker" c:type="CinnamonWindowTracker*"/>
          </instance-parameter>
          <parameter name="metawin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-window-tracker.c"
                 line="805">A #MetaWindow</doc>
            <type name="Meta.Window" c:type="MetaWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_window_interesting"
              c:identifier="cinnamon_window_tracker_is_window_interesting">
        <doc xml:space="preserve"
             filename="../src/cinnamon-window-tracker.c"
             line="131">The CinnamonWindowTracker associates certain kinds of windows with
applications; however, others we don't want to
appear in places where we want to give a list of windows
for an application, such as the alt-tab dialog.

An example of a window we don't want to show is the root
desktop window.  We skip all override-redirect types, and also
exclude other window types like tooltip explicitly, though generally
most of these should be override-redirect.</doc>
        <source-position filename="../src/cinnamon-window-tracker.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-window-tracker.c"
               line="146">%TRUE if a window is "interesting"</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tracker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-window-tracker.c"
                 line="133">the CinnamonWindowTracker</doc>
            <type name="WindowTracker" c:type="CinnamonWindowTracker*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-window-tracker.c"
                 line="134">a #MetaWindow</doc>
            <type name="Meta.Window" c:type="MetaWindow*"/>
          </parameter>
        </parameters>
      </method>
      <property name="focus-app" transfer-ownership="none">
        <type name="App"/>
      </property>
      <glib:signal name="startup-sequence-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="StartupSequence"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="window-app-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Meta.Window"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WindowTrackerClass"
            c:type="CinnamonWindowTrackerClass"
            glib:is-gtype-struct-for="WindowTracker">
      <source-position filename="../src/cinnamon-window-tracker.h" line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="WindowTrackerPrivate"
            c:type="CinnamonWindowTrackerPrivate"
            disguised="1">
      <source-position filename="../src/cinnamon-window-tracker.h" line="16"/>
    </record>
    <function-macro name="XFIXES_CURSOR"
                    c:identifier="CINNAMON_XFIXES_CURSOR"
                    introspectable="0">
      <source-position filename="../src/cinnamon-xfixes-cursor.h" line="14"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="XFIXES_CURSOR_CLASS"
                    c:identifier="CINNAMON_XFIXES_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-xfixes-cursor.h" line="15"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="XFIXES_CURSOR_GET_CLASS"
                    c:identifier="CINNAMON_XFIXES_CURSOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/cinnamon-xfixes-cursor.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="XFixesCursor"
           c:symbol-prefix="xfixes_cursor"
           c:type="CinnamonXFixesCursor"
           parent="GObject.Object"
           glib:type-name="CinnamonXFixesCursor"
           glib:get-type="cinnamon_xfixes_cursor_get_type"
           glib:type-struct="XFixesCursorClass">
      <source-position filename="../src/cinnamon-xfixes-cursor.h" line="11"/>
      <function name="get_for_stage"
                c:identifier="cinnamon_xfixes_cursor_get_for_stage">
        <source-position filename="../src/cinnamon-xfixes-cursor.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-xfixes-cursor.c"
               line="327">A #CinnamonXFixesCursor instance</doc>
          <type name="XFixesCursor" c:type="CinnamonXFixesCursor*"/>
        </return-value>
        <parameters>
          <parameter name="stage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-xfixes-cursor.c"
                 line="325">The #ClutterStage to get the cursor for</doc>
            <type name="Clutter.Stage" c:type="ClutterStage*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_hot_x" c:identifier="cinnamon_xfixes_cursor_get_hot_x">
        <source-position filename="../src/cinnamon-xfixes-cursor.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-xfixes-cursor.c"
               line="405">the current mouse cursor's hot x-coordinate.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfixes_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-xfixes-cursor.c"
                 line="403">the #CinnamonXFixesCursor</doc>
            <type name="XFixesCursor" c:type="CinnamonXFixesCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hot_y" c:identifier="cinnamon_xfixes_cursor_get_hot_y">
        <source-position filename="../src/cinnamon-xfixes-cursor.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-xfixes-cursor.c"
               line="419">the current mouse cursor's hot y-coordinate.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfixes_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-xfixes-cursor.c"
                 line="417">the #CinnamonXFixesCursor</doc>
            <type name="XFixesCursor" c:type="CinnamonXFixesCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="cinnamon_xfixes_cursor_hide">
        <doc xml:space="preserve"
             filename="../src/cinnamon-xfixes-cursor.c"
             line="351">Hide the system mouse cursor.</doc>
        <source-position filename="../src/cinnamon-xfixes-cursor.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfixes_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-xfixes-cursor.c"
                 line="353">the #CinnamonXFixesCursor</doc>
            <type name="XFixesCursor" c:type="CinnamonXFixesCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="cinnamon_xfixes_cursor_show">
        <doc xml:space="preserve"
             filename="../src/cinnamon-xfixes-cursor.c"
             line="365">Show the system mouse cursor to show</doc>
        <source-position filename="../src/cinnamon-xfixes-cursor.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfixes_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-xfixes-cursor.c"
                 line="367">the #CinnamonXFixesCursor</doc>
            <type name="XFixesCursor" c:type="CinnamonXFixesCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_texture_image"
              c:identifier="cinnamon_xfixes_cursor_update_texture_image">
        <source-position filename="../src/cinnamon-xfixes-cursor.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xfixes_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-xfixes-cursor.c"
                 line="381">the #CinnamonXFixesCursor</doc>
            <type name="XFixesCursor" c:type="CinnamonXFixesCursor*"/>
          </instance-parameter>
          <parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cinnamon-xfixes-cursor.c"
                 line="382">ClutterTexture to update with the current sprite image.</doc>
            <type name="Clutter.Texture" c:type="ClutterTexture*"/>
          </parameter>
        </parameters>
      </method>
      <property name="stage"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Clutter.Stage"/>
      </property>
      <glib:signal name="cursor-change" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="XFixesCursorClass"
            c:type="CinnamonXFixesCursorClass"
            disguised="1"
            glib:is-gtype-struct-for="XFixesCursor">
      <source-position filename="../src/cinnamon-xfixes-cursor.h" line="11"/>
    </record>
    <function name="breakpoint" c:identifier="cinnamon_breakpoint">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="805">Using G_BREAKPOINT(), interrupt the current process.  This is useful
in conjunction with a debugger such as gdb.</doc>
      <source-position filename="../src/cinnamon-util.h" line="56"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="cinnamon-app">
      <doc xml:space="preserve"
           filename="../src/cinnamon-app.c"
           line="39">This object wraps a #GMenuTreeEntry, providing methods and signals
primarily useful for running applications.</doc>
    </docsection>
    <docsection name="cinnamon-doc-system">
      <doc xml:space="preserve"
           filename="../src/cinnamon-doc-system.c"
           line="10">Wraps #GtkRecentManager, caching recently used document information, and adds
APIs for asynchronous queries.</doc>
    </docsection>
    <docsection name="cinnamon-generic-container">
      <doc xml:space="preserve"
           filename="../src/cinnamon-generic-container.c"
           line="3">#CinnamonGenericContainer is mainly a workaround for the current
lack of GObject subclassing + vfunc overrides in gjs.  We
implement the container interface, but proxy the virtual functions
into signals, which gjs can catch.

#CinnamonGenericContainer is an #StWidget, and automatically takes its
borders and padding into account during size request and allocation.</doc>
    </docsection>
    <docsection name="cinnamon-perf-log">
      <doc xml:space="preserve"
           filename="../src/cinnamon-perf-log.c"
           line="15">CinnamonPerfLog provides a way for different parts of the code to
record information for subsequent analysis and interactive
exploration. Events exist of a timestamp, an event ID, and
arguments to the event.

Emphasis is placed on storing recorded events in a compact
fashion so log recording disturbs the execution of the program
as little as possible, however events should not be recorded
at too fine a granularity - an event that is recorded once
per frame or once per user action is appropriate, an event that
occurs many times per frame is not.

Arguments are identified by a D-Bus style signature; at the moment
only a limited number of event signatures are supported to
simplify the code.</doc>
    </docsection>
    <docsection name="cinnamon-screenshot">
      <doc xml:space="preserve"
           filename="../src/cinnamon-screenshot.h"
           line="5">The #CinnamonScreenshot object is used to take screenshots of screen
areas or windows and write them out as png files.</doc>
    </docsection>
    <docsection name="cinnamon-slicer">
      <doc xml:space="preserve"
           filename="../src/cinnamon-slicer.c"
           line="3">A #StBin that has 0 minimum size, and will clip its child
in the middle.</doc>
    </docsection>
    <docsection name="cinnamon-stack">
      <doc xml:space="preserve"
           filename="../src/cinnamon-stack.c"
           line="3">A #CinnamonStack draws its children on top of each other,
aligned to the top left.  It will be sized in width/height
according to the largest such dimension of its children, and
all children will be allocated that size.  This differs
from #ClutterGroup which allocates its children their natural
size, even if that would overflow the size allocated to the stack.</doc>
    </docsection>
    <docsection name="cinnamon-window-tracker">
      <doc xml:space="preserve"
           filename="../src/cinnamon-window-tracker.c"
           line="32">Maintains a mapping from windows to applications (.desktop file ids).
It currently implements this with some heuristics on the WM_CLASS X11
property (and some static override regexps); in the future, we want to
have it also track through startup-notification.</doc>
    </docsection>
    <function name="get_event_state" c:identifier="cinnamon_get_event_state">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="614">Gets the current state of the event (the set of modifier keys that
are pressed down). Thhis is a wrapper around
clutter_event_get_state() that strips out any un-declared modifier
flags, to make gjs happy; see
https://bugzilla.gnome.org/show_bug.cgi?id=597292.</doc>
      <source-position filename="../src/cinnamon-util.h" line="27"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/cinnamon-util.c"
             line="624">the state from the event</doc>
        <type name="Clutter.ModifierType" c:type="ClutterModifierType"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="616">a #ClutterEvent</doc>
          <type name="Clutter.Event" c:type="ClutterEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_file_contents_utf8"
              c:identifier="cinnamon_get_file_contents_utf8">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="762">Asynchronously load the contents of a file as a NUL terminated
string, validating it as UTF-8.  Embedded NUL characters count as
invalid content.</doc>
      <source-position filename="../src/cinnamon-util.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="764">UTF-8 encoded filename path</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="765">The callback to call when finished</doc>
          <type name="FileContentsCallback"
                c:type="CinnamonFileContentsCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="766">data to pass with the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_file_contents_utf8_sync"
              c:identifier="cinnamon_get_file_contents_utf8_sync"
              deprecated="1"
              deprecated-version="3.1"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="676">Synchronously load the contents of a file as a NUL terminated
string, validating it as UTF-8.  Embedded NUL characters count as
invalid content.</doc>
      <source-position filename="../src/cinnamon-util.h" line="37"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/cinnamon-util.c"
             line="685">File contents</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="678">UTF-8 encoded filename path</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="parse_search_provider"
              c:identifier="cinnamon_parse_search_provider"
              throws="1">
      <source-position filename="../src/cinnamon-util.h" line="58"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/cinnamon-util.c"
             line="826">%TRUE on success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="819">description of provider</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="820">location to store a display name</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="url"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="821">location to store template of url</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="langs"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="822">list of supported languages</doc>
          <type name="GLib.List" c:type="GList**">
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="icon_data_uri"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="823">location to store uri</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="shader_effect_set_double_uniform"
              c:identifier="cinnamon_shader_effect_set_double_uniform">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="945">Set a double uniform on a ClutterShaderEffect.

The problem here is that JavaScript doesn't have more than
one number type, and gjs tries to automatically guess what
type we want to set a GValue to. If the number is "1.0" or
something, it will use an integer, which will cause errors
in GLSL.</doc>
      <source-position filename="../src/cinnamon-util.h" line="65"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="effect" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="947">The #ClutterShaderEffect</doc>
          <type name="Clutter.ShaderEffect" c:type="ClutterShaderEffect*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="948">The name of the uniform</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="949">The value to set it to.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_format_date" c:identifier="cinnamon_util_format_date">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="508">Formats a date for the current locale. This should be
used instead of the Spidermonkey Date.toLocaleFormat()
extension because Date.toLocaleFormat() is buggy for
Unicode format strings:
https://bugzilla.mozilla.org/show_bug.cgi?id=508783</doc>
      <source-position filename="../src/cinnamon-util.h" line="23"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/cinnamon-util.c"
             line="521">the formatted date. If the date is
 outside of the range of a GDateTime (which contains
 any plausible dates we actually care about), will
 return an empty string.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="510">a strftime-style string format, as parsed by
  g_date_time_format()</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="time_ms" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="512">milliseconds since 1970-01-01 00:00:00 UTC; the
  value returned by Date.getTime()</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_icon_for_uri"
              c:identifier="cinnamon_util_get_icon_for_uri">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="318">Look up the icon that should be associated with a given URI.  Handles
various special GNOME-internal cases like x-nautilus-search, etc.</doc>
      <source-position filename="../src/cinnamon-util.h" line="13"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/cinnamon-util.c"
             line="325">A new #GIcon</doc>
        <type name="Gio.Icon" c:type="GIcon*"/>
      </return-value>
      <parameters>
        <parameter name="text_uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="320">A URI</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_label_for_uri"
              c:identifier="cinnamon_util_get_label_for_uri">
      <source-position filename="../src/cinnamon-util.h" line="12"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="text_uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_transformed_allocation"
              c:identifier="cinnamon_util_get_transformed_allocation">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="453">This function is similar to a combination of clutter_actor_get_transformed_position(),
and clutter_actor_get_transformed_size(), but unlike
clutter_actor_get_transformed_size(), it always returns a transform
of the current allocation, while clutter_actor_get_transformed_size() returns
bad values (the transform of the requested size) if a relayout has been
queued.

This function is more convenient to use than
clutter_actor_get_abs_allocation_vertices() if no transformation is in effect
and also works around limitations in the GJS binding of arrays.</doc>
      <source-position filename="../src/cinnamon-util.h" line="18"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="actor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="455">a #ClutterActor</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </parameter>
        <parameter name="box"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="456">location to store returned box in stage coordinates</doc>
          <type name="Clutter.ActorBox" c:type="ClutterActorBox*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_week_start"
              c:identifier="cinnamon_util_get_week_start">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="547">Gets the first week day for the current locale, expressed as a
number in the range 0..6, representing week days from Sunday to
Saturday.</doc>
      <source-position filename="../src/cinnamon-util.h" line="21"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/cinnamon-util.c"
             line="554">A number representing the first week day for the current
         locale</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="util_set_hidden_from_pick"
              c:identifier="cinnamon_util_set_hidden_from_pick">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="420">If @hidden is %TRUE, hide @actor from pick even with a mode of
%CLUTTER_PICK_ALL; if @hidden is %FALSE, unhide @actor.</doc>
      <source-position filename="../src/cinnamon-util.h" line="15"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="actor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="422">A #ClutterActor</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </parameter>
        <parameter name="hidden" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="423">Whether @actor should be hidden from pick</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="write_soup_message_to_stream"
              c:identifier="cinnamon_write_soup_message_to_stream"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="633">Write a string to a GOutputStream as binary data. This is a
workaround for the lack of proper binary strings in GJS.</doc>
      <source-position filename="../src/cinnamon-util.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="stream" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="635">a #GOutputStream</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="636">a #SoupMessage</doc>
          <type name="Soup.Message" c:type="SoupMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="write_string_to_stream"
              c:identifier="cinnamon_write_string_to_stream"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/cinnamon-util.c"
           line="656">Write a string to a GOutputStream as UTF-8. This is a workaround
for not having binary buffers in GJS.</doc>
      <source-position filename="../src/cinnamon-util.h" line="33"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/cinnamon-util.c"
             line="665">%TRUE if write succeeded</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stream" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="658">a #GOutputStream</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cinnamon-util.c"
               line="659">a UTF-8 string to write to @stream</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
