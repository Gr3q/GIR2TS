<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="xapp"/>
  <namespace name="XApp"
             version="1.0"
             shared-library="libxapp.so.1"
             c:identifier-prefixes="XApp"
             c:symbol-prefixes="xapp_">
    <record name="FavoriteInfo"
            c:type="XAppFavoriteInfo"
            glib:type-name="XAppFavoriteInfo"
            glib:get-type="xapp_favorite_info_get_type"
            c:symbol-prefix="favorite_info">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-favorites.h"
           line="37">Information related to a single favorite file.</doc>
      <source-position filename="../libxapp/xapp-favorites.h" line="51"/>
      <field name="uri" writable="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.h"
             line="39">The uri to the favorite file.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="display_name" writable="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.h"
             line="40">The name for use when displaying the item. This may not exactly match
the filename if there are files with the same name but in different folders.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="cached_mimetype" writable="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.h"
             line="42">The mimetype calculated for the uri when it was added to favorites.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <method name="copy" c:identifier="xapp_favorite_info_copy">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="47">Makes an exact copy of an existing #XAppFavoriteInfo.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="53">a new #XAppFavoriteInfo.  Free using #xapp_favorite_info_free.

Since 2.0</doc>
          <type name="FavoriteInfo" c:type="XAppFavoriteInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="49">The #XAppFavoriteInfo to duplicate.</doc>
            <type name="FavoriteInfo" c:type="const XAppFavoriteInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="xapp_favorite_info_free">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="73">Destroys the #XAppFavoriteInfo.

Since 2.0</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="75">The #XAppFavoriteInfo to free.</doc>
            <type name="FavoriteInfo" c:type="XAppFavoriteInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Favorites"
           c:symbol-prefix="favorites"
           c:type="XAppFavorites"
           parent="GObject.Object"
           glib:type-name="XAppFavorites"
           glib:get-type="xapp_favorites_get_type"
           glib:type-struct="FavoritesClass">
      <source-position filename="../libxapp/xapp-favorites.h" line="16"/>
      <function name="get_default"
                c:identifier="xapp_favorites_get_default"
                version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="772">Returns the #XAppFavorites instance.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="18"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="777">the XAppFavorites instance for the process. Do not free.</doc>
          <type name="Favorites" c:type="XAppFavorites*"/>
        </return-value>
      </function>
      <method name="add" c:identifier="xapp_favorites_add" version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="965">Adds a new favorite.  If the uri already exists, this does nothing.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="967">The #XAppFavorites</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="968">The uri the favorite is for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_actions"
              c:identifier="xapp_favorites_create_actions"
              version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="1316">Generates a list of favorite GtkActions.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="1323">a new #GtkActionGroup populated with a list of favorites, or NULL
            if there are no favorites.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Gtk.Action"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1318">The #XAppFavorites instance.</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="mimetypes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1319">The mimetypes to filter for, or NULL to include all favorites.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_menu"
              c:identifier="xapp_favorites_create_menu"
              version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="1211">Generates a GtkMenu widget populated with favorites. The callback will be called when
a menu item has been activated, and will include the uri of the respective item.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="1222">a new #GtkMenu populated with a list of favorites, or NULL
            if there are no favorites.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1213">The #XAppFavorites instance.</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="mimetypes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1214">The mimetypes to filter for, or NULL to include all favorites.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1215">(closure user_data): The callback to use when a menu item has been selected.</doc>
            <type name="FavoritesItemSelectedCallback"
                  c:type="XAppFavoritesItemSelectedCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1216">The data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1217">Destroy function for user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_display_name"
              c:identifier="xapp_favorites_find_by_display_name"
              version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="899">Looks for an XAppFavoriteInfo that corresponds to @display_name.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="906">an XAppFavoriteInfo or NULL if one was not found. This is owned
         by the favorites manager and should not be freed.</doc>
          <type name="FavoriteInfo" c:type="XAppFavoriteInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="901">The #XAppFavorites</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="902">The display name to lookup info for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_uri"
              c:identifier="xapp_favorites_find_by_uri"
              version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="933">Looks for an XAppFavoriteInfo that corresponds to @uri.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="24"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="940">an XAppFavoriteInfo or NULL if one was not found. This is owned
         by the favorites manager and should not be freed.</doc>
          <type name="FavoriteInfo" c:type="XAppFavoriteInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="935">The #XAppFavorites</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="936">The uri to lookup info for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_favorites"
              c:identifier="xapp_favorites_get_favorites"
              version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="824">Gets a list of all favorites.  If mimetype is not %NULL, the list will
contain only favorites with that mimetype.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="19"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="832">a list of #XAppFavoriteInfos.
            Free the list with #g_list_free, free elements with #xapp_favorite_info_free.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="FavoriteInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="826">The #XAppFavorites</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="mimetypes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="827">The mimetypes to filter by for results</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_favorites"
              c:identifier="xapp_favorites_get_n_favorites"
              version="2.0">
        <source-position filename="../libxapp/xapp-favorites.h" line="21"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-favorites.c"
               line="866">The number of favorite files</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="864">The #XAppFavorites</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="launch" c:identifier="xapp_favorites_launch" version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="1025">Opens a favorite in its default app.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1027">The #XAppFavorites</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1028">The uri for the favorite to launch</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1029">The timestamp from an event or 0</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="xapp_favorites_remove" version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="984">Removes a favorite from the list.</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="986">The #XAppFavorites</doc>
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="987">The uri for the favorite being removed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename" c:identifier="xapp_favorites_rename" version="2.0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="1056">Removes old_uri and adds new_uri. This is mainly for file managers to use as
a convenience instead of add/remove, and guarantees the result, without having to
worry about multiple dbus calls (gsettings).</doc>
        <source-position filename="../libxapp/xapp-favorites.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="favorites" transfer-ownership="none">
            <type name="Favorites" c:type="XAppFavorites*"/>
          </instance-parameter>
          <parameter name="old_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1058">the old favorite's uri.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-favorites.c"
                 line="1059">The new uri.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="first" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-favorites.c"
             line="758">Notifies when the favorites list has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FavoritesClass"
            c:type="XAppFavoritesClass"
            glib:is-gtype-struct-for="Favorites">
      <source-position filename="../libxapp/xapp-favorites.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="FavoritesItemSelectedCallback"
              c:type="XAppFavoritesItemSelectedCallback">
      <source-position filename="../libxapp/xapp-favorites.h" line="69"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="favorites" transfer-ownership="none">
          <type name="Favorites" c:type="XAppFavorites*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="GtkWindow"
           c:symbol-prefix="gtk_window"
           c:type="XAppGtkWindow"
           parent="Gtk.Window"
           glib:type-name="XAppGtkWindow"
           glib:get-type="xapp_gtk_window_get_type"
           glib:type-struct="GtkWindowClass">
      <source-position filename="../libxapp/xapp-gtk-window.h" line="20"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="xapp_gtk_window_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-gtk-window.c"
             line="385">Creates a new #XAppGtkWindow of type @type.  See gtk_window_new()
for more details.</doc>
        <source-position filename="../libxapp/xapp-gtk-window.h" line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="392">A new #XAppGtkWindow (transfer: full)</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="387">The #GtkWindowType to use</doc>
            <type name="Gtk.WindowType" c:type="GtkWindowType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_icon_from_file"
              c:identifier="xapp_gtk_window_set_icon_from_file"
              throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-gtk-window.c"
             line="422">Sets the icon name hint for a window manager (like muffin) to make
available when applications want to change their icons during runtime
without having to resort to the internal low-res pixbufs that GdkWindow
sets on the client side.  This also chains up and calls GtkWindow.set_icon_from_file
for convenience and compatibility.  Set to %NULL to unset.</doc>
        <source-position filename="../libxapp/xapp-gtk-window.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="424">The #XAppGtkWindow to set the icon name for</doc>
            <type name="GtkWindow" c:type="XAppGtkWindow*"/>
          </instance-parameter>
          <parameter name="file_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="425">The icon path to set, or %NULL to unset.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="xapp_gtk_window_set_icon_name">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-gtk-window.c"
             line="400">Sets the icon name hint for a window manager (like muffin) to make
available when applications want to change their icons during runtime
without having to resort to the internal low-res pixbufs that GdkWindow
sets on the client side.  This also chains up and calls GtkWindow.set_icon_name
for convenience and compatibility.  Set to %NULL to unset.</doc>
        <source-position filename="../libxapp/xapp-gtk-window.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="402">The #XAppGtkWindow to set the icon name for</doc>
            <type name="GtkWindow" c:type="XAppGtkWindow*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="403">The icon name or path to set, or %NULL to unset.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress" c:identifier="xapp_gtk_window_set_progress">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-gtk-window.c"
             line="446">Sets the progress hint for a window manager (like muffin) to make
available when applications want to display the application's progress
in some operation. The value sent to the WM will be clamped to
between 0 and 100.

Note: If a window will stick around after progress is complete, you will
probaby need to set progress to 0 to remove any progress effects on taskbars
and window lists.

Setting progress will also cancel the 'pulsing' flag on the window as
well, if it has been set.</doc>
        <source-position filename="../libxapp/xapp-gtk-window.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="448">The #XAppGtkWindow to set the progress for</doc>
            <type name="GtkWindow" c:type="XAppGtkWindow*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="449">The value to set for progress.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_pulse"
              c:identifier="xapp_gtk_window_set_progress_pulse">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-gtk-window.c"
             line="474">Sets the progress pulse hint hint for a window manager (like muffin)
to make available when applications want to display indeterminate or
ongoing progress in a task manager.

Note: If a window will stick around after progress is complete, you will
probaby need to set progress to 0 to remove any progress effects on taskbars
and window lists.  This will also remove the pulse state, if it is set.

Setting an explicit progress value will unset this flag.</doc>
        <source-position filename="../libxapp/xapp-gtk-window.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="476">The #XAppGtkWindow to set the progress for</doc>
            <type name="GtkWindow" c:type="XAppGtkWindow*"/>
          </instance-parameter>
          <parameter name="pulse" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-gtk-window.c"
                 line="477">Whether to have pulsing set or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="GtkWindowClass"
            c:type="XAppGtkWindowClass"
            glib:is-gtype-struct-for="GtkWindow">
      <source-position filename="../libxapp/xapp-gtk-window.h" line="20"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="IS_KBD_LAYOUT_CONTROLLER"
                    c:identifier="XAPP_IS_KBD_LAYOUT_CONTROLLER"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_KBD_LAYOUT_CONTROLLER_CLASS"
                    c:identifier="XAPP_IS_KBD_LAYOUT_CONTROLLER_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="16"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT"
                    c:identifier="XAPP_IS_OBJECT"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="319"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT"
                    c:identifier="XAPP_IS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="XAPP_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY"
                    c:identifier="XAPP_IS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="340"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY_CLASS"
                    c:identifier="XAPP_IS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="341"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON"
                    c:identifier="XAPP_IS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="371"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON_CLASS"
                    c:identifier="XAPP_IS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="372"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STATUS_ICON_INTERFACE"
                    c:identifier="XAPP_IS_STATUS_ICON_INTERFACE"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STATUS_ICON_INTERFACE_PROXY"
                    c:identifier="XAPP_IS_STATUS_ICON_INTERFACE_PROXY"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="217"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STATUS_ICON_INTERFACE_PROXY_CLASS"
                    c:identifier="XAPP_IS_STATUS_ICON_INTERFACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="218"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STATUS_ICON_INTERFACE_SKELETON"
                    c:identifier="XAPP_IS_STATUS_ICON_INTERFACE_SKELETON"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="287"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STATUS_ICON_INTERFACE_SKELETON_CLASS"
                    c:identifier="XAPP_IS_STATUS_ICON_INTERFACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="288"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <class name="IconChooserButton"
           c:symbol-prefix="icon_chooser_button"
           c:type="XAppIconChooserButton"
           parent="Gtk.Button"
           glib:type-name="XAppIconChooserButton"
           glib:get-type="xapp_icon_chooser_button_get_type"
           glib:type-struct="IconChooserButtonClass">
      <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                       line="13"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="xapp_icon_chooser_button_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="242">Creates a new #XAppIconChooserButton and sets its icon to @icon.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                         line="15"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-button.c"
               line="247">a newly created #XAppIconChooserButton</doc>
          <type name="IconChooserButton" c:type="XAppIconChooserButton*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_size"
                   c:identifier="xapp_icon_chooser_button_new_with_size">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="255">Creates a new #XAppIconChooserButton, and sets the sizes of the button image and the icons in
the dialog. Note that xapp_icon_chooser_button_new_with_size (NULL, NULL) is the same as calling
xapp_icon_chooser_button_new ().</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                         line="17"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-button.c"
               line="263">a newly created #XAppIconChooserButton</doc>
          <type name="IconChooserButton" c:type="XAppIconChooserButton*"/>
        </return-value>
        <parameters>
          <parameter name="icon_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="257">the size of icon to use in the button, or NULL to use the default value.</doc>
            <type name="Gtk.IconSize" c:type="GtkIconSize"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dialog"
              c:identifier="xapp_icon_chooser_button_get_dialog">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="409">Gets a reference to the icon chooser dialog for the #XAppIconChooserButton.
This is useful for setting properties on the dialog.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                         line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-button.c"
               line="416">the #XAppIconChooserDialog</doc>
          <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="411">a #XAppIconChooserButton</doc>
            <type name="IconChooserButton" c:type="XAppIconChooserButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="xapp_icon_chooser_button_get_icon"
              glib:get-property="icon">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="317">Gets the icon from the #XAppIconChooserButton.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                         line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-button.c"
               line="323">a string representing the icon. This may be an icon name or a file path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="319">a #XAppIconChooserButton</doc>
            <type name="IconChooserButton" c:type="XAppIconChooserButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_category"
              c:identifier="xapp_icon_chooser_button_set_default_category">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="386">Sets the icon on the #XAppIconChooserButton.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                         line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="388">a #XAppIconChooserButton</doc>
            <type name="IconChooserButton" c:type="XAppIconChooserButton*"/>
          </instance-parameter>
          <parameter name="category"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="389">a string representing the category selected by default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="xapp_icon_chooser_button_set_icon"
              glib:set-property="icon">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="335">Sets the icon on the #XAppIconChooserButton.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                         line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="337">a #XAppIconChooserButton</doc>
            <type name="IconChooserButton" c:type="XAppIconChooserButton*"/>
          </instance-parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="338">a string representing the icon to be set. This may be an icon name or a file path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_size"
              c:identifier="xapp_icon_chooser_button_set_icon_size"
              glib:set-property="icon-size">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="277">Sets the icon size used in the button.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                         line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="279">a #XAppIconChooserButton</doc>
            <type name="IconChooserButton" c:type="XAppIconChooserButton*"/>
          </instance-parameter>
          <parameter name="icon_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-button.c"
                 line="280">the size of icon to use in the button, or -1 to use the default value.</doc>
            <type name="Gtk.IconSize" c:type="GtkIconSize"/>
          </parameter>
        </parameters>
      </method>
      <property name="category" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="227">The category selected by default.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon"
                writable="1"
                transfer-ownership="none"
                setter="set_icon"
                getter="get_icon">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="213">The preferred size to use when looking up icons. This only works with icon names.
Additionally, there is no guarantee that a selected icon name will exist in a
particular size.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-size"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_size">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-button.c"
             line="200">The size to use when displaying the icon.</doc>
        <type name="Gtk.IconSize"/>
      </property>
    </class>
    <record name="IconChooserButtonClass"
            c:type="XAppIconChooserButtonClass"
            glib:is-gtype-struct-for="IconChooserButton">
      <source-position filename="../libxapp/xapp-icon-chooser-button.h"
                       line="13"/>
      <field name="parent_class">
        <type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
      </field>
    </record>
    <class name="IconChooserDialog"
           c:symbol-prefix="icon_chooser_dialog"
           c:type="XAppIconChooserDialog"
           parent="GtkWindow"
           glib:type-name="XAppIconChooserDialog"
           glib:get-type="xapp_icon_chooser_dialog_get_type"
           glib:type-struct="IconChooserDialogClass">
      <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                       line="13"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="xapp_icon_chooser_dialog_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="696">Creates a new #XAppIconChooserDialog.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-dialog.c"
               line="701">a newly created #XAppIconChooserDialog</doc>
          <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
        </return-value>
      </constructor>
      <method name="add_button"
              c:identifier="xapp_icon_chooser_dialog_add_button">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="954">Allows a button to be added to the #GtkActionBar of the dialog with a custom
response id.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="956">an #XAppIconChooserDialog</doc>
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="957">a #GtkButton to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="packing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="958">the #GtkPackType to specify start or end packing to the action bar</doc>
            <type name="Gtk.PackType" c:type="GtkPackType"/>
          </parameter>
          <parameter name="response_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="959">the dialog response id to return when this button is clicked.</doc>
            <type name="Gtk.ResponseType" c:type="GtkResponseType"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_custom_category"
              c:identifier="xapp_icon_chooser_dialog_add_custom_category">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="866">Adds a custom category to the dialog.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="868">a #XAppIconChooserDialog</doc>
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="869">the name of the category as it will be displayed in the category list</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="icons" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="870">a list of icon names to add to the new category</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_icon"
              c:identifier="xapp_icon_chooser_dialog_get_default_icon"
              glib:get-property="default-icon">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="823">Returns the default icon (if set).</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-dialog.c"
               line="828">the default icon, or NULL if none is set</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_string"
              c:identifier="xapp_icon_chooser_dialog_get_icon_string">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="908">Gets the currently selected icon from the dialog. If allow-paths is TRUE, this function may return
either an icon name or a path depending on what the user selects. Otherwise it will only return an
icon name.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-dialog.c"
               line="916">the string representation of the currently selected icon or NULL
if no icon is selected.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="910">a #XAppIconChooserDialog</doc>
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="xapp_icon_chooser_dialog_run">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="709">Shows the dialog and enters a separate main loop until an icon is chosen or the action is canceled.

xapp_icon_chooser_dialog_run (), xapp_icon_chooser_dialog_run_with_icon(), and
xapp_icon_chooser_dialog_run_with_category () may all be called multiple times. This is useful for
applications which use this dialog multiple times, as it may improve performance for subsequent
calls.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-dialog.c"
               line="720">GTK_RESPONSE_OK if the user selected an icon, or GTK_RESPONSE_CANCEL otherwise</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="711">a #XAppIconChooserDialog</doc>
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run_with_category"
              c:identifier="xapp_icon_chooser_dialog_run_with_category">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="773">Like xapp_icon_chooser_dialog_run but selects a particular category specified by @category.
This is used when there is a particular category of icon that is more appropriate than the
others. If the category does not exist, the first category in the list will be selected. To
get a list of possible categories, use gtk_icon_theme_list_contexts ().

xapp_icon_chooser_dialog_run (), xapp_icon_chooser_dialog_run_with_icon(), and
xapp_icon_chooser_dialog_run_with_category () may all be called multiple times. This is useful for
applications which use this dialog multiple times, as it may improve performance for subsequent
calls.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-dialog.c"
               line="787">GTK_RESPONSE_OK if the user selected an icon, or GTK_RESPONSE_CANCEL otherwise</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="775">a #XAppIconChooserDialog</doc>
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_with_icon"
              c:identifier="xapp_icon_chooser_dialog_run_with_icon">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="737">Like xapp_icon_chooser_dialog_run but selects the icon specified by @icon. This can be either an
icon name or a path. Passing an icon string or path that doesn't exist is accepted, but it may show
multiple results, or none at all. This behavior is useful if, for example, you wish to have the
user select an image file from a particular directory.

If the property allow_paths is FALSE, setting a path will yield no results when the dialog is opened.

xapp_icon_chooser_dialog_run (), xapp_icon_chooser_dialog_run_with_icon(), and
xapp_icon_chooser_dialog_run_with_category () may all be called multiple times. This is useful for
applications which use this dialog multiple times, as it may improve performance for subsequent
calls.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-icon-chooser-dialog.c"
               line="754">GTK_RESPONSE_OK if the user selected an icon, or GTK_RESPONSE_CANCEL otherwise</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="739">a #XAppIconChooserDialog</doc>
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="740">a string representing the icon that should be selected</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_icon"
              c:identifier="xapp_icon_chooser_dialog_set_default_icon"
              glib:set-property="default-icon">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="840">Sets the default icon. If @icon is not NULL, a button will be shown that
will reset the dialog to it's default value.</doc>
        <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <type name="IconChooserDialog" c:type="XAppIconChooserDialog*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-icon-chooser-dialog.c"
                 line="842">the default icon, or NULL to unset</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-paths" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="645">Whether to allow paths to be searched and selected or only icon names.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="default-icon"
                writable="1"
                transfer-ownership="none"
                setter="set_default_icon"
                getter="get_default_icon">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="657">The icon to use by default.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-size" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-icon-chooser-dialog.c"
             line="630">The preferred size to use when looking up icons. This only works with icon names.
Additionally, there is no guarantee that a selected icon name will exist in a
particular size.</doc>
        <type name="IconSize"/>
      </property>
      <glib:signal name="close" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="select" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="IconChooserDialogClass"
            c:type="XAppIconChooserDialogClass"
            glib:is-gtype-struct-for="IconChooserDialog">
      <source-position filename="../libxapp/xapp-icon-chooser-dialog.h"
                       line="13"/>
      <field name="parent_class">
        <type name="GtkWindowClass" c:type="XAppGtkWindowClass"/>
      </field>
    </record>
    <enumeration name="IconSize"
                 glib:type-name="XAppIconSize"
                 glib:get-type="xapp_icon_size_get_type"
                 c:type="XAppIconSize">
      <member name="16"
              value="16"
              c:identifier="XAPP_ICON_SIZE_16"
              glib:nick="16"
              glib:name="XAPP_ICON_SIZE_16">
      </member>
      <member name="22"
              value="22"
              c:identifier="XAPP_ICON_SIZE_22"
              glib:nick="22"
              glib:name="XAPP_ICON_SIZE_22">
      </member>
      <member name="24"
              value="24"
              c:identifier="XAPP_ICON_SIZE_24"
              glib:nick="24"
              glib:name="XAPP_ICON_SIZE_24">
      </member>
      <member name="32"
              value="32"
              c:identifier="XAPP_ICON_SIZE_32"
              glib:nick="32"
              glib:name="XAPP_ICON_SIZE_32">
      </member>
      <member name="48"
              value="48"
              c:identifier="XAPP_ICON_SIZE_48"
              glib:nick="48"
              glib:name="XAPP_ICON_SIZE_48">
      </member>
      <member name="96"
              value="96"
              c:identifier="XAPP_ICON_SIZE_96"
              glib:nick="96"
              glib:name="XAPP_ICON_SIZE_96">
      </member>
    </enumeration>
    <function-macro name="KBD_LAYOUT_CONTROLLER"
                    c:identifier="XAPP_KBD_LAYOUT_CONTROLLER"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="13"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="KBD_LAYOUT_CONTROLLER_CLASS"
                    c:identifier="XAPP_KBD_LAYOUT_CONTROLLER_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="14"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="KBD_LAYOUT_CONTROLLER_GET_CLASS"
                    c:identifier="XAPP_KBD_LAYOUT_CONTROLLER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="17"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="KbdLayoutController"
           c:symbol-prefix="kbd_layout_controller"
           c:type="XAppKbdLayoutController"
           parent="GObject.Object"
           glib:type-name="XAppKbdLayoutController"
           glib:get-type="xapp_kbd_layout_controller_get_type"
           glib:type-struct="KbdLayoutControllerClass">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="33"/>
      <constructor name="new" c:identifier="xapp_kbd_layout_controller_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="400">Creates a new XAppKbdLayoutController instance.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="36"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="405">a new #XAppKbdLayoutController instance</doc>
          <type name="KbdLayoutController" c:type="XAppKbdLayoutController*"/>
        </return-value>
      </constructor>
      <function name="render_cairo_subscript"
                c:identifier="xapp_kbd_layout_controller_render_cairo_subscript">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="702">Renders a subscript number in the given work area.  This should
be called from within a "draw" or "paint" widget/actor function,
where a valid cairo_t is provided to draw with.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="704">a #cairo_t</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="705">the x position of the drawing area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="706">the y position of the drawing area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="707">the width of the drawing area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="708">the height of the drawing area</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="subscript" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="709">the number to render</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_all_names"
              c:identifier="xapp_kbd_layout_controller_get_all_names">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="519">Returns an array of all full layout names</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="525">array of names</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="521">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_flag_id"
              c:identifier="xapp_kbd_layout_controller_get_current_flag_id">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="576">Returns the duplicate id for the current layout</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="582">the id</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="578">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_group"
              c:identifier="xapp_kbd_layout_controller_get_current_group">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="425">Selects the previous group in the group list.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="427">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_icon_name"
              c:identifier="xapp_kbd_layout_controller_get_current_icon_name">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="535">Returns the icon file name (no path or extension) to use for the current layout</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="541">a new string with the icon name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="537">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_name"
              c:identifier="xapp_kbd_layout_controller_get_current_name">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="502">Returns the full name of the current keyboard layout.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="508">the newly created string or NULL
if something went wrong.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="504">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_short_group_label"
              c:identifier="xapp_kbd_layout_controller_get_current_short_group_label">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="618">Returns the short group label (and subscript, if any) of the current layout</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="624">a new string or NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="620">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_variant_label"
              c:identifier="xapp_kbd_layout_controller_get_current_variant_label">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="660">Returns the variant label (and subscript, if any) of the current layout</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="666">a new string or NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="662">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="xapp_kbd_layout_controller_get_enabled"
              glib:get-property="enabled">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="413">Returns whether or not the layout controller is enabled</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="415">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flag_id_for_group"
              c:identifier="xapp_kbd_layout_controller_get_flag_id_for_group">
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_name_for_group"
              c:identifier="xapp_kbd_layout_controller_get_icon_name_for_group">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="555">Returns the icon file name (no path or extension) to use for the specified layout.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="562">a new string with the icon name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="557">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="558">a group number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_short_group_label_for_group"
              c:identifier="xapp_kbd_layout_controller_get_short_group_label_for_group">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="638">Returns the short group label and subscript of the specified layout.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="645">a new string or NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="640">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="641">a group number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_variant_label_for_group"
              c:identifier="xapp_kbd_layout_controller_get_variant_label_for_group">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="680">Returns the variant label and subscript of the specified layout.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-kbd-layout-controller.c"
               line="687">a new string or NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="682">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="683">a group number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_group"
              c:identifier="xapp_kbd_layout_controller_next_group">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="461">Selects the next group in the group list.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="463">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="previous_group"
              c:identifier="xapp_kbd_layout_controller_previous_group">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="475">Selects the previous group in the group list.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="477">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_current_group"
              c:identifier="xapp_kbd_layout_controller_set_current_group">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-kbd-layout-controller.c"
             line="439">Selects the given group number as active.</doc>
        <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="441">the #XAppKbdLayoutController</doc>
            <type name="KbdLayoutController"
                  c:type="XAppKbdLayoutController*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-kbd-layout-controller.c"
                 line="442">the group number to make active</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled" transfer-ownership="none" getter="get_enabled">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="KbdLayoutControllerPrivate"
              c:type="XAppKbdLayoutControllerPrivate*"/>
      </field>
      <glib:signal name="config-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="layout-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="KbdLayoutControllerClass"
            c:type="XAppKbdLayoutControllerClass"
            glib:is-gtype-struct-for="KbdLayoutController">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="KbdLayoutControllerPrivate"
            c:type="XAppKbdLayoutControllerPrivate"
            disguised="1">
      <source-position filename="../libxapp/xapp-kbd-layout-controller.h"
                       line="19"/>
    </record>
    <class name="MonitorBlanker"
           c:symbol-prefix="monitor_blanker"
           c:type="XAppMonitorBlanker"
           parent="GObject.Object"
           glib:type-name="XAppMonitorBlanker"
           glib:get-type="xapp_monitor_blanker_get_type"
           glib:type-struct="MonitorBlankerClass">
      <source-position filename="../libxapp/xapp-monitor-blanker.h" line="13"/>
      <constructor name="new" c:identifier="xapp_monitor_blanker_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-monitor-blanker.c"
             line="67">Creates a new #XAppMonitorBlanker.</doc>
        <source-position filename="../libxapp/xapp-monitor-blanker.h"
                         line="15"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-monitor-blanker.c"
               line="72">a newly created #XAppMonitorBlanker</doc>
          <type name="MonitorBlanker" c:type="XAppMonitorBlanker*"/>
        </return-value>
      </constructor>
      <method name="are_monitors_blanked"
              c:identifier="xapp_monitor_blanker_are_monitors_blanked">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-monitor-blanker.c"
             line="182">Returns whether monitors are currently blanked.
See xapp_monitor_blanker_blank_other_monitors().</doc>
        <source-position filename="../libxapp/xapp-monitor-blanker.h"
                         line="21"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-monitor-blanker.c"
               line="189">%TRUE if monitors are blanked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-monitor-blanker.c"
                 line="184">a #XAppMonitorBlanker</doc>
            <type name="MonitorBlanker" c:type="XAppMonitorBlanker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="blank_other_monitors"
              c:identifier="xapp_monitor_blanker_blank_other_monitors">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-monitor-blanker.c"
             line="110">Blanks monitors besides the one where the @window is.</doc>
        <source-position filename="../libxapp/xapp-monitor-blanker.h"
                         line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-monitor-blanker.c"
                 line="112">a #XAppMonitorBlanker</doc>
            <type name="MonitorBlanker" c:type="XAppMonitorBlanker*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-monitor-blanker.c"
                 line="113">a #GtkWindow</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblank_monitors"
              c:identifier="xapp_monitor_blanker_unblank_monitors">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-monitor-blanker.c"
             line="152">Unblanks monitors that were blanked by
xapp_monitor_blanker_blank_other_monitors();</doc>
        <source-position filename="../libxapp/xapp-monitor-blanker.h"
                         line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-monitor-blanker.c"
                 line="154">a #XAppMonitorBlanker</doc>
            <type name="MonitorBlanker" c:type="XAppMonitorBlanker*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="MonitorBlankerClass"
            c:type="XAppMonitorBlankerClass"
            glib:is-gtype-struct-for="MonitorBlanker">
      <source-position filename="../libxapp/xapp-monitor-blanker.h" line="13"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="OBJECT"
                    c:identifier="XAPP_OBJECT"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="318"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_GET_IFACE"
                    c:identifier="XAPP_OBJECT_GET_IFACE"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="320"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT"
                    c:identifier="XAPP_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="402"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="XAPP_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="403"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_GET_CLASS"
                    c:identifier="XAPP_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY"
                    c:identifier="XAPP_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="337"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_CLASS"
                    c:identifier="XAPP_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="338"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_GET_CLASS"
                    c:identifier="XAPP_OBJECT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="339"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON"
                    c:identifier="XAPP_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="368"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_CLASS"
                    c:identifier="XAPP_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="369"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_GET_CLASS"
                    c:identifier="XAPP_OBJECT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="370"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Object"
               c:symbol-prefix="object"
               c:type="XAppObject"
               glib:type-name="XAppObject"
               glib:get-type="xapp_object_get_type"
               glib:type-struct="ObjectIface">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2688">The #XAppObject type is a specialized container of interfaces.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="329"/>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_status_icon_interface"
              c:identifier="xapp_object_get_status_icon_interface"
              glib:get-property="status-icon-interface">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2718">Gets the #XAppStatusIconInterface instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="333"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="2724">A #XAppStatusIconInterface that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="StatusIconInterface" c:type="XAppStatusIconInterface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2720">A #XAppObject.</doc>
            <type name="Object" c:type="XAppObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_status_icon_interface"
              c:identifier="xapp_object_peek_status_icon_interface"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2736">Like xapp_object_get_status_icon_interface() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="334"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="2744">A #XAppStatusIconInterface or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="StatusIconInterface" c:type="XAppStatusIconInterface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2738">A #XAppObject.</doc>
            <type name="Object" c:type="XAppObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="status-icon-interface"
                writable="1"
                transfer-ownership="none"
                getter="get_status_icon_interface">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2707">The #XAppStatusIconInterface instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="StatusIconInterface"/>
      </property>
    </interface>
    <record name="ObjectIface"
            c:type="XAppObjectIface"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2694">Virtual table for the #XAppObject interface.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="329"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2696">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="ObjectManagerClient"
           c:symbol-prefix="object_manager_client"
           c:type="XAppObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="XAppObjectManagerClient"
           glib:get-type="xapp_object_manager_client_get_type"
           glib:type-struct="ObjectManagerClientClass">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="3002">The #XAppObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="422"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="xapp_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3089">Finishes an operation started with xapp_object_manager_client_new().</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="440"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="3096">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3091">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to xapp_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="xapp_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3179">Finishes an operation started with xapp_object_manager_client_new_for_bus().</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="459"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="3186">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3181">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to xapp_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="xapp_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3204">Like xapp_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See xapp_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="462"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="3219">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3206">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3207">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3208">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3209">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3210">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="xapp_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3114">Synchronously creates #GDBusObjectManagerClient using xapp_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See xapp_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="443"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="3129">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3116">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3117">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3118">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3119">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3120">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="xapp_object_manager_client_get_proxy_type">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3027">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy derived and #GDBusProxy derived types.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="430"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="3036">A #GDBusProxy derived #GType if @interface_name is not %NULL, otherwise the #GType for #XAppObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3029">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3030">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3031">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3032">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="xapp_object_manager_client_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3059">Asynchronously creates #GDBusObjectManagerClient using xapp_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call xapp_object_manager_client_new_finish() to get the result of the operation.

See xapp_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="432"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3061">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3062">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3063">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3064">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3065">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3066">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3067">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="xapp_object_manager_client_new_for_bus">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3149">Like xapp_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call xapp_object_manager_client_new_for_bus_finish() to get the result of the operation.

See xapp_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="451"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3151">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3152">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3153">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3154">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3155">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3156">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="3157">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectManagerClientPrivate"
              c:type="XAppObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="ObjectManagerClientClass"
            c:type="XAppObjectManagerClientClass"
            glib:is-gtype-struct-for="ObjectManagerClient">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="3008">Class structure for #XAppObjectManagerClient.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="422"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="3010">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="ObjectManagerClientPrivate"
            c:type="XAppObjectManagerClientPrivate"
            disguised="1">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="410"/>
    </record>
    <class name="ObjectProxy"
           c:symbol-prefix="object_proxy"
           c:type="XAppObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="XAppObjectProxy"
           glib:get-type="xapp_object_proxy_get_type"
           glib:type-struct="ObjectProxyClass">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2768">The #XAppObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="357"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="xapp_object_proxy_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2845">Creates a new proxy object.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="365"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="2852">The proxy object.</doc>
          <type name="ObjectProxy" c:type="XAppObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2847">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2848">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectProxyPrivate" c:type="XAppObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="ObjectProxyClass"
            c:type="XAppObjectProxyClass"
            glib:is-gtype-struct-for="ObjectProxy">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2774">Class structure for #XAppObjectProxy.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="357"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2776">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="ObjectProxyPrivate"
            c:type="XAppObjectProxyPrivate"
            disguised="1">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="345"/>
    </record>
    <class name="ObjectSkeleton"
           c:symbol-prefix="object_skeleton"
           c:type="XAppObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="XAppObjectSkeleton"
           glib:get-type="xapp_object_skeleton_get_type"
           glib:type-struct="ObjectSkeletonClass">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2863">The #XAppObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="388"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="xapp_object_skeleton_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2961">Creates a new skeleton object.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="396"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="2967">The skeleton object.</doc>
          <type name="ObjectSkeleton" c:type="XAppObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2963">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_status_icon_interface"
              c:identifier="xapp_object_skeleton_set_status_icon_interface">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2976">Sets the #XAppStatusIconInterface instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt; on @object.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2978">A #XAppObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="XAppObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2979">A #XAppStatusIconInterface or %NULL to clear the interface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectSkeletonPrivate"
              c:type="XAppObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ObjectSkeletonClass"
            c:type="XAppObjectSkeletonClass"
            glib:is-gtype-struct-for="ObjectSkeleton">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2869">Class structure for #XAppObjectSkeleton.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="388"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2871">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="ObjectSkeletonPrivate"
            c:type="XAppObjectSkeletonPrivate"
            disguised="1">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="376"/>
    </record>
    <class name="PreferencesWindow"
           c:symbol-prefix="preferences_window"
           c:type="XAppPreferencesWindow"
           parent="Gtk.Window"
           glib:type-name="XAppPreferencesWindow"
           glib:get-type="xapp_preferences_window_get_type"
           glib:type-struct="PreferencesWindowClass">
      <source-position filename="../libxapp/xapp-preferences-window.h"
                       line="19"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="xapp_preferences_window_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-preferences-window.c"
             line="110">Creates a new #XAppPreferencesWindow.</doc>
        <source-position filename="../libxapp/xapp-preferences-window.h"
                         line="21"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-preferences-window.c"
               line="115">a newly created #XAppPreferencesWindow</doc>
          <type name="PreferencesWindow" c:type="XAppPreferencesWindow*"/>
        </return-value>
      </constructor>
      <virtual-method name="close">
        <source-position filename="../libxapp/xapp-preferences-window.h"
                         line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="PreferencesWindow" c:type="XAppPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_button"
              c:identifier="xapp_preferences_window_add_button">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-preferences-window.c"
             line="155">Adds a button to the bottom action bar of the window. Where
the button is place will be determined by the #GtkPackType. The
action bar will show automatically once at least one button is
added.</doc>
        <source-position filename="../libxapp/xapp-preferences-window.h"
                         line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-preferences-window.c"
                 line="157">a #XAppPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="XAppPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-preferences-window.c"
                 line="158">a #GtkWidget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="pack_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-preferences-window.c"
                 line="159">a #GtkPackType to use</doc>
            <type name="Gtk.PackType" c:type="GtkPackType"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_page" c:identifier="xapp_preferences_window_add_page">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-preferences-window.c"
             line="124">Adds a page to the window. The page is identified by name. The
title will be used in the sidebar so should be short. The sidebar
will show automatically once at least two pages are added.</doc>
        <source-position filename="../libxapp/xapp-preferences-window.h"
                         line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-preferences-window.c"
                 line="126">a #XAppPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="XAppPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-preferences-window.c"
                 line="127">a #GtkWidget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-preferences-window.c"
                 line="128">the name for the page</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-preferences-window.c"
                 line="129">a human-readable title for the page</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <glib:signal name="close" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesWindowClass"
            c:type="XAppPreferencesWindowClass"
            glib:is-gtype-struct-for="PreferencesWindow">
      <source-position filename="../libxapp/xapp-preferences-window.h"
                       line="19"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="close">
        <callback name="close">
          <source-position filename="../libxapp/xapp-preferences-window.h"
                           line="18"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="PreferencesWindow" c:type="XAppPreferencesWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function-macro name="STATUS_ICON_INTERFACE"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_ICON_INTERFACE_GET_IFACE"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE_GET_IFACE"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_ICON_INTERFACE_PROXY"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE_PROXY"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="214"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_ICON_INTERFACE_PROXY_CLASS"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="215"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_ICON_INTERFACE_PROXY_GET_CLASS"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="216"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_ICON_INTERFACE_SKELETON"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE_SKELETON"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="284"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_ICON_INTERFACE_SKELETON_CLASS"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="285"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STATUS_ICON_INTERFACE_SKELETON_GET_CLASS"
                    c:identifier="XAPP_STATUS_ICON_INTERFACE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="286"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="ScrollDirection"
                 glib:type-name="XAppScrollDirection"
                 glib:get-type="xapp_scroll_direction_get_type"
                 c:type="XAppScrollDirection">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-status-icon.h"
           line="31">Represents the direction of icon scroll events.</doc>
      <member name="up"
              value="0"
              c:identifier="XAPP_SCROLL_UP"
              glib:nick="up"
              glib:name="XAPP_SCROLL_UP">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.h"
             line="33">Scroll theoretical content up.</doc>
      </member>
      <member name="down"
              value="1"
              c:identifier="XAPP_SCROLL_DOWN"
              glib:nick="down"
              glib:name="XAPP_SCROLL_DOWN">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.h"
             line="34">Scroll theoretical content down.</doc>
      </member>
      <member name="left"
              value="2"
              c:identifier="XAPP_SCROLL_LEFT"
              glib:nick="left"
              glib:name="XAPP_SCROLL_LEFT">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.h"
             line="35">Scroll theoretical content left.</doc>
      </member>
      <member name="right"
              value="3"
              c:identifier="XAPP_SCROLL_RIGHT"
              glib:nick="right"
              glib:name="XAPP_SCROLL_RIGHT">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.h"
             line="36">Scroll theoretical content right.</doc>
      </member>
    </enumeration>
    <class name="StackSidebar"
           c:symbol-prefix="stack_sidebar"
           c:type="XAppStackSidebar"
           parent="Gtk.Bin"
           glib:type-name="XAppStackSidebar"
           glib:get-type="xapp_stack_sidebar_get_type"
           glib:type-struct="StackSidebarClass">
      <source-position filename="../libxapp/xapp-stack-sidebar.h" line="11"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="xapp_stack_sidebar_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-stack-sidebar.c"
             line="447">Creates a new sidebar.</doc>
        <source-position filename="../libxapp/xapp-stack-sidebar.h" line="13"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-stack-sidebar.c"
               line="452">the new #XAppStackSidebar</doc>
          <type name="StackSidebar" c:type="XAppStackSidebar*"/>
        </return-value>
      </constructor>
      <method name="get_stack"
              c:identifier="xapp_stack_sidebar_get_stack"
              glib:get-property="stack">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-stack-sidebar.c"
             line="503">Retrieves the stack.
See xapp_stack_sidebar_set_stack().</doc>
        <source-position filename="../libxapp/xapp-stack-sidebar.h" line="18"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-stack-sidebar.c"
               line="510">the associated #GtkStack or
    %NULL if none has been set explicitly</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-stack-sidebar.c"
                 line="505">a #XAppStackSidebar</doc>
            <type name="StackSidebar" c:type="XAppStackSidebar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="xapp_stack_sidebar_set_stack"
              glib:set-property="stack">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-stack-sidebar.c"
             line="461">Set the #GtkStack associated with this #XAppStackSidebar.

The sidebar widget will automatically update according to the order
(packing) and items within the given #GtkStack.</doc>
        <source-position filename="../libxapp/xapp-stack-sidebar.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-stack-sidebar.c"
                 line="463">a #XAppStackSidebar</doc>
            <type name="StackSidebar" c:type="XAppStackSidebar*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-stack-sidebar.c"
                 line="464">a #GtkStack</doc>
            <type name="Gtk.Stack" c:type="GtkStack*"/>
          </parameter>
        </parameters>
      </method>
      <property name="stack"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <type name="Gtk.Stack"/>
      </property>
    </class>
    <record name="StackSidebarClass"
            c:type="XAppStackSidebarClass"
            glib:is-gtype-struct-for="StackSidebar">
      <source-position filename="../libxapp/xapp-stack-sidebar.h" line="11"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="StatusIcon"
           c:symbol-prefix="status_icon"
           c:type="XAppStatusIcon"
           parent="GObject.Object"
           glib:type-name="XAppStatusIcon"
           glib:get-type="xapp_status_icon_get_type"
           glib:type-struct="StatusIconClass">
      <source-position filename="../libxapp/xapp-status-icon.h" line="13"/>
      <constructor name="new"
                   c:identifier="xapp_status_icon_new"
                   version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1862">Creates a new #XAppStatusIcon instance</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1867">a new #XAppStatusIcon. Use g_object_unref when finished.</doc>
          <type name="StatusIcon" c:type="XAppStatusIcon*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_name"
                   c:identifier="xapp_status_icon_new_with_name"
                   version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1877">Creates a new #XAppStatusIcon instance and sets its name to %name.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1882">a new #XAppStatusIcon. Use g_object_unref when finished.</doc>
          <type name="StatusIcon" c:type="XAppStatusIcon*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="any_monitors"
                c:identifier="xapp_status_icon_any_monitors"
                version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1953">Looks for the existence of any active #XAppStatusIconMonitors on the bus.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1958">%TRUE if at least one monitor was found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <method name="get_icon_size"
              c:identifier="xapp_status_icon_get_icon_size"
              glib:get-property="icon-size"
              version="1.8">
        <source-position filename="../libxapp/xapp-status-icon.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1581">The desired icon size - usually set by the host based on panel size.
This is not what it's guaranteed to get, and this is really only useful when
receiving absolute icon paths from the client app.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1579">a #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary_menu"
              c:identifier="xapp_status_icon_get_primary_menu"
              glib:get-property="primary-menu"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1789">Returns a pointer to a #GtkMenu that was set previously for the
primary mouse button.  If no menu was set, this returns %NULL.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1796">the #GtkMenu or %NULL if none was set.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1791">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secondary_menu"
              c:identifier="xapp_status_icon_get_secondary_menu"
              glib:get-property="secondary-menu"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1841">Returns a pointer to a #GtkMenu that was set previously for the
secondary mouse button.  If no menu was set, this returns %NULL.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1848">the #GtkMenu or %NULL if none was set.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1843">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="xapp_status_icon_get_state"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1894">Gets the current #XAppStatusIconState of icon. The state is determined by whether
the icon is being displayed by an #XAppStatusMonitor client, a fallback tray icon,
or not being displayed at all.

See #XAppStatusIconState for more details.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1904">the icon's state.</doc>
          <type name="StatusIconState" c:type="XAppStatusIconState"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1896">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="xapp_status_icon_get_visible"
              version="1.8.5">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1701">Returns whether or not the icon should currently be visible.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon.c"
               line="1707">the current visibility state.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1703">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="popup_menu"
              c:identifier="xapp_status_icon_popup_menu"
              version="1.8.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1721">Pop up @menu using the positioning arguments. These arguments should be
those provided by a #XAppStatusIcon::button-release-event.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1723">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="menu"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1724">A #GtkMenu to display when the primary mouse button is released.</doc>
            <type name="Gtk.Menu" c:type="GtkMenu*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1725">The x anchor position for the menu.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1726">The y anchor position for the menu.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1727">The button used to initiate this action (or 0)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1728">The event time (or 0)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1729">The #GtkPositionType for the position of the icon.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="xapp_status_icon_set_icon_name"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1545">Sets the icon name or local path to use.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1547">a #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1548">An icon name or absolute path to an icon.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="xapp_status_icon_set_label"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1640">Sets a label, shown beside the icon</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1642">a #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1643">some text</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="xapp_status_icon_set_metadata"
              version="1.8.7">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1918">Sets metadata to pass to the icon proxy for an applet's use. Right now this is only so
xapp-sn-watcher can tell the applets when the icon is originating from appindicator so panel
button 'highlighting' can behave correctly.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1920">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="metadata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1921">A json-formatted string of key:values.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="xapp_status_icon_set_name"
              glib:set-property="name"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1497">Sets the status icon name. This is not shown to users.</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1499">a #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1500">a name (this defaults to the name of the application, if not set)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary_menu"
              c:identifier="xapp_status_icon_set_primary_menu"
              glib:set-property="primary-menu"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1758">See the #XAppStatusIcon:primary-menu property for details</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1760">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="menu"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1761">A #GtkMenu to display when the primary mouse button is released.</doc>
            <type name="Gtk.Menu" c:type="GtkMenu*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secondary_menu"
              c:identifier="xapp_status_icon_set_secondary_menu"
              glib:set-property="secondary-menu"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1810">See the #XAppStatusIcon:secondary-menu property for details</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1812">an #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="menu"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1813">A #GtkMenu to display when the primary mouse button is released.</doc>
            <type name="Gtk.Menu" c:type="GtkMenu*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_text"
              c:identifier="xapp_status_icon_set_tooltip_text"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1608">Sets the tooltip text</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1610">a #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="tooltip_text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1611">the text to show in the tooltip</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="xapp_status_icon_set_visible"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1670">Sets the visibility of the status icon</doc>
        <source-position filename="../libxapp/xapp-status-icon.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1672">a #XAppStatusIcon</doc>
            <type name="StatusIcon" c:type="XAppStatusIcon*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1673">whether or not the status icon should be visible</doc>
            <type name="gboolean" c:type="const gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-size"
                writable="1"
                transfer-ownership="none"
                getter="get_icon_size">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1366">The icon size that is preferred by icon monitor/host - this is usually a product
of some calculation based on the panel size.  It can be used by the client to size
an icon to be saved as a file and its path sent to the host.

If this value is 0 it has not been set, and its value can be unreliable if the host
has multiple #XAppStatusIconMonitors active.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_name">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1386">The name of the icon for sorting purposes. If this is in the form of 'org.x.StatusIcon.foo`
and set immediately upon creation of the icon, it will also attempt to own this dbus name;
this can be useful in sandboxed environments where a well-defined name is required. If
additional icons are created, only the name given to the initial one will be used for dbus,
though different names can still affect the sort order. This is set to the value of
g_get_prgname() if no other name is provided.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="primary-menu"
                writable="1"
                transfer-ownership="none"
                setter="set_primary_menu"
                getter="get_primary_menu">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1310">A #GtkMenu to use when requested by the remote monitor via a left (or primary) click.

When this property is not %NULL, the menu will be automatically positioned and
displayed during a primary button release.

When this property IS %NULL, the #XAppStatusIcon::activate will be sent for primary
button presses.

In both cases, the #XAppStatusIcon::button-press-event and #XAppStatusIcon::button-release-events
will be fired like normal.

Setting this will remove any floating reference to the menu and assume ownership.
As a result, it is not necessary to maintain a reference to it in the parent
application (or unref it when finished with it - if you wish to replace the menu,
simply call this method again with a new menu.

The same #GtkMenu widget can be set as both the primary and secondary.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="secondary-menu"
                writable="1"
                transfer-ownership="none"
                setter="set_secondary_menu"
                getter="get_secondary_menu">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1338">A #GtkMenu to use when requested by the remote monitor via a right (or secondary) click.

When this property is not %NULL, the menu will be automatically positioned and
displayed during a secondary button release.

When this property IS %NULL, the #XAppStatusIcon::activate will be sent for secondary
button presses.

In both cases, the #XAppStatusIcon::button-press-event and #XAppStatusIcon::button-release-events
will be fired like normal.

Setting this will remove any floating reference to the menu and assume ownership.
As a result, it is not necessary to maintain a reference to it in the parent
application (or unref it when finished with it - if you wish to replace the menu,
simply call this method again with a new menu.

The same #GtkMenu widget can be set as both the primary and secondary.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <glib:signal name="activate" when="first" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1441">Gets emitted when the user activates the status icon.  If the XAppStatusIcon:primary-menu or
XAppStatusIcon:secondary-menu is not %NULL, this signal is skipped for the respective button
presses.  A middle button click will always send this signal when pressed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1444">The button that was pressed</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1445">The time supplied by the event, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="button-press-event" when="last" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1403">Gets emitted when there is a button press received from an applet</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1406">The absolute x position to use for menu positioning</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1407">The absolute y position to use for menu positioning</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1408">The button that was pressed</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1409">The time supplied by the event, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1410">The #GtkPositionType to use for menu positioning</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="button-release-event" when="last" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1422">Gets emitted when there is a button release received from an applet</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1425">The absolute x position to use for menu positioning</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1426">The absolute y position to use for menu positioning</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1427">The button that was released</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1428">The time supplied by the event, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1429">The #GtkPositionType to use for menu positioning</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scroll-event" when="first" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1477">Gets emitted when the user uses the mouse scroll wheel over the status icon.
For the most part, amounts will always be 1, unless an applet supports smooth
scrolling.  Generally the direction value is most important.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1480">The amount of movement for the scroll event</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1481">the #XAppScrollDirection of the scroll event</doc>
            <type name="ScrollDirection"/>
          </parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1482">The time supplied by the event, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-changed" when="first" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.c"
             line="1459">Gets emitted when the state of the icon changes. If you wish
to react to changes in how the status icon is being handled
(perhaps to alter the menu or other click behavior), you should
connect to this - see #XAppStatusIconState for more details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon.c"
                 line="1462">The new #XAppStatusIconState of the icon</doc>
            <type name="StatusIconState"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StatusIconClass"
            c:type="XAppStatusIconClass"
            glib:is-gtype-struct-for="StatusIcon">
      <source-position filename="../libxapp/xapp-status-icon.h" line="13"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="StatusIconInterface"
               c:symbol-prefix="status_icon_interface"
               c:type="XAppStatusIconInterface"
               glib:type-name="XAppStatusIconInterface"
               glib:get-type="xapp_status_icon_interface_get_type"
               glib:type-struct="StatusIconInterfaceIface">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="581">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt;.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="77"/>
      <function name="interface_info"
                c:identifier="xapp_status_icon_interface_interface_info">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="541">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="546">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="xapp_status_icon_interface_override_properties">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="554">Overrides all #GObject properties in the #XAppStatusIconInterface interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="562">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="556">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="557">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_icon_name"
                      invoker="get_icon_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="827">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_icon_name() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="837">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="829">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_icon_size"
                      invoker="get_icon_size"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1011">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.IconSize"&gt;"IconSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1019">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1013">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_label" invoker="get_label" introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="929">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Label"&gt;"Label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_label() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="63"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="931">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata"
                      invoker="get_metadata"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1104">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_metadata() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1114">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1106">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="776">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_name() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="67"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="786">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="778">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_primary_menu_is_open"
                      invoker="get_primary_menu_is_open"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1042">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.PrimaryMenuIsOpen"&gt;"PrimaryMenuIsOpen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1050">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1044">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_secondary_menu_is_open"
                      invoker="get_secondary_menu_is_open"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1073">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.SecondaryMenuIsOpen"&gt;"SecondaryMenuIsOpen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1081">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1075">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tooltip_text"
                      invoker="get_tooltip_text"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="878">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.TooltipText"&gt;"TooltipText"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_tooltip_text() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="888">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="880">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_visible"
                      invoker="get_visible"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="980">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Visible"&gt;"Visible"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="988">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="982">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_button_press">
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_button_release">
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_scroll">
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_delta" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_orientation" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_button_press"
              c:identifier="xapp_status_icon_interface_call_button_press">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1155">Asynchronously invokes the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonPress"&gt;ButtonPress()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call xapp_status_icon_interface_call_button_press_finish() to get the result of the operation.

See xapp_status_icon_interface_call_button_press_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1157">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1158">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1159">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1160">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1161">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1162">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1163">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1164">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1165">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_button_press_finish"
              c:identifier="xapp_status_icon_interface_call_button_press_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1200">Finishes an operation started with xapp_status_icon_interface_call_button_press().</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="112"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1208">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1202">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1203">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to xapp_status_icon_interface_call_button_press().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_button_press_sync"
              c:identifier="xapp_status_icon_interface_call_button_press_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1227">Synchronously invokes the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonPress"&gt;ButtonPress()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See xapp_status_icon_interface_call_button_press() for the asynchronous version of this method.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="117"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1242">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1229">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1230">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1231">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1232">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1233">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1234">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1235">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_button_release"
              c:identifier="xapp_status_icon_interface_call_button_release">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1277">Asynchronously invokes the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonRelease"&gt;ButtonRelease()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call xapp_status_icon_interface_call_button_release_finish() to get the result of the operation.

See xapp_status_icon_interface_call_button_release_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1279">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1280">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1281">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1282">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1283">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1284">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1285">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1286">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1287">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_button_release_finish"
              c:identifier="xapp_status_icon_interface_call_button_release_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1322">Finishes an operation started with xapp_status_icon_interface_call_button_release().</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="138"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1330">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1324">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1325">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to xapp_status_icon_interface_call_button_release().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_button_release_sync"
              c:identifier="xapp_status_icon_interface_call_button_release_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1349">Synchronously invokes the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonRelease"&gt;ButtonRelease()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See xapp_status_icon_interface_call_button_release() for the asynchronous version of this method.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="143"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1364">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1351">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1352">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1353">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1354">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1355">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1356">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1357">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scroll"
              c:identifier="xapp_status_icon_interface_call_scroll">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1399">Asynchronously invokes the &lt;link linkend="gdbus-method-org-x-StatusIcon.Scroll"&gt;Scroll()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call xapp_status_icon_interface_call_scroll_finish() to get the result of the operation.

See xapp_status_icon_interface_call_scroll_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1401">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="arg_delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1402">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1403">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1404">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1405">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1406">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1407">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scroll_finish"
              c:identifier="xapp_status_icon_interface_call_scroll_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1438">Finishes an operation started with xapp_status_icon_interface_call_scroll().</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="162"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1446">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1440">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1441">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to xapp_status_icon_interface_call_scroll().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scroll_sync"
              c:identifier="xapp_status_icon_interface_call_scroll_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1465">Synchronously invokes the &lt;link linkend="gdbus-method-org-x-StatusIcon.Scroll"&gt;Scroll()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See xapp_status_icon_interface_call_scroll() for the asynchronous version of this method.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="167"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1478">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1467">A #XAppStatusIconInterfaceProxy.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="arg_delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1468">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1469">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1470">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1471">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_button_press"
              c:identifier="xapp_status_icon_interface_complete_button_press">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1509">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonPress"&gt;ButtonPress()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1511">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1512">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_button_release"
              c:identifier="xapp_status_icon_interface_complete_button_release">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1527">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonRelease"&gt;ButtonRelease()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1529">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1530">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_scroll"
              c:identifier="xapp_status_icon_interface_complete_scroll">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1545">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-x-StatusIcon.Scroll"&gt;Scroll()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1547">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1548">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_icon_name"
              c:identifier="xapp_status_icon_interface_dup_icon_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="845">Gets a copy of the &lt;link linkend="gdbus-property-org-x-StatusIcon.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="183"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="853">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="847">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_label"
              c:identifier="xapp_status_icon_interface_dup_label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="947">Gets a copy of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Label"&gt;"Label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="191"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="955">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="949">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_metadata"
              c:identifier="xapp_status_icon_interface_dup_metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1122">Gets a copy of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="207"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1130">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1124">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="xapp_status_icon_interface_dup_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="794">Gets a copy of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="179"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="802">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="796">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_tooltip_text"
              c:identifier="xapp_status_icon_interface_dup_tooltip_text"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="896">Gets a copy of the &lt;link linkend="gdbus-property-org-x-StatusIcon.TooltipText"&gt;"TooltipText"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="187"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="904">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="898">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="xapp_status_icon_interface_get_icon_name"
              glib:get-property="icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="827">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_icon_name() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="182"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="837">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="829">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_size"
              c:identifier="xapp_status_icon_interface_get_icon_size"
              glib:get-property="icon-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1011">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.IconSize"&gt;"IconSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1019">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1013">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="xapp_status_icon_interface_get_label"
              glib:get-property="label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="929">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Label"&gt;"Label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_label() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="190"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="931">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="xapp_status_icon_interface_get_metadata"
              glib:get-property="metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1104">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_metadata() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="206"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1114">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1106">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="xapp_status_icon_interface_get_name"
              glib:get-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="776">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_name() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="178"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="786">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="778">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary_menu_is_open"
              c:identifier="xapp_status_icon_interface_get_primary_menu_is_open"
              glib:get-property="primary-menu-is-open"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1042">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.PrimaryMenuIsOpen"&gt;"PrimaryMenuIsOpen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1050">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1044">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secondary_menu_is_open"
              c:identifier="xapp_status_icon_interface_get_secondary_menu_is_open"
              glib:get-property="secondary-menu-is-open"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1073">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.SecondaryMenuIsOpen"&gt;"SecondaryMenuIsOpen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1081">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1075">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tooltip_text"
              c:identifier="xapp_status_icon_interface_get_tooltip_text"
              glib:get-property="tooltip-text"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="878">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.TooltipText"&gt;"TooltipText"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use xapp_status_icon_interface_dup_tooltip_text() if on another thread.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="186"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="888">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="880">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="xapp_status_icon_interface_get_visible"
              glib:get-property="visible"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="980">Gets the value of the &lt;link linkend="gdbus-property-org-x-StatusIcon.Visible"&gt;"Visible"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="988">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="982">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="xapp_status_icon_interface_set_icon_name"
              glib:set-property="icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="863">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="865">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="866">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_size"
              c:identifier="xapp_status_icon_interface_set_icon_size"
              glib:set-property="icon-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1027">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.IconSize"&gt;"IconSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1029">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1030">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="xapp_status_icon_interface_set_label"
              glib:set-property="label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="965">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.Label"&gt;"Label"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="967">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="968">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="xapp_status_icon_interface_set_metadata"
              glib:set-property="metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1140">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1142">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1143">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="xapp_status_icon_interface_set_name"
              glib:set-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="812">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="814">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="815">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary_menu_is_open"
              c:identifier="xapp_status_icon_interface_set_primary_menu_is_open"
              glib:set-property="primary-menu-is-open"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1058">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.PrimaryMenuIsOpen"&gt;"PrimaryMenuIsOpen"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1060">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1061">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secondary_menu_is_open"
              c:identifier="xapp_status_icon_interface_set_secondary_menu_is_open"
              glib:set-property="secondary-menu-is-open"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1089">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.SecondaryMenuIsOpen"&gt;"SecondaryMenuIsOpen"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1091">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1092">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip_text"
              c:identifier="xapp_status_icon_interface_set_tooltip_text"
              glib:set-property="tooltip-text"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="914">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.TooltipText"&gt;"TooltipText"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="916">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="917">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="xapp_status_icon_interface_set_visible"
              glib:set-property="visible"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="996">Sets the &lt;link linkend="gdbus-property-org-x-StatusIcon.Visible"&gt;"Visible"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="195"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="998">A #XAppStatusIconInterface.</doc>
            <type name="StatusIconInterface"
                  c:type="XAppStatusIconInterface*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="999">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="702">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.IconName"&gt;"IconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-size"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_size"
                getter="get_icon_size">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="738">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.IconSize"&gt;"IconSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="720">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.Label"&gt;"Label"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metadata"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata"
                getter="get_metadata">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="765">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.Metadata"&gt;"Metadata"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="693">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="primary-menu-is-open"
                writable="1"
                transfer-ownership="none"
                setter="set_primary_menu_is_open"
                getter="get_primary_menu_is_open">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="747">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.PrimaryMenuIsOpen"&gt;"PrimaryMenuIsOpen"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="secondary-menu-is-open"
                writable="1"
                transfer-ownership="none"
                setter="set_secondary_menu_is_open"
                getter="get_secondary_menu_is_open">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="756">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.SecondaryMenuIsOpen"&gt;"SecondaryMenuIsOpen"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tooltip-text"
                writable="1"
                transfer-ownership="none"
                setter="set_tooltip_text"
                getter="get_tooltip_text">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="711">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.TooltipText"&gt;"TooltipText"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="visible"
                writable="1"
                transfer-ownership="none"
                setter="set_visible"
                getter="get_visible">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="729">Represents the D-Bus property &lt;link linkend="gdbus-property-org-x-StatusIcon.Visible"&gt;"Visible"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-button-press" when="last">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="613">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonPress"&gt;ButtonPress()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call xapp_status_icon_interface_complete_button_press() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="627">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="616">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="617">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="618">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="619">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="620">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="621">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-button-release" when="last">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="640">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-x-StatusIcon.ButtonRelease"&gt;ButtonRelease()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call xapp_status_icon_interface_complete_button_release() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="654">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="643">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="644">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="645">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="646">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="647">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_panel_position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="648">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-scroll" when="last">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="667">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-x-StatusIcon.Scroll"&gt;Scroll()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call xapp_status_icon_interface_complete_scroll() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="679">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="670">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="671">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="672">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="673">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="StatusIconInterfaceIface"
            c:type="XAppStatusIconInterfaceIface"
            glib:is-gtype-struct-for="StatusIconInterface">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="587">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt;.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="77"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="589">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_button_press">
        <callback name="handle_button_press">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_button" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_time" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_panel_position" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_button_release">
        <callback name="handle_button_release">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_button" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_time" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_panel_position" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_scroll">
        <callback name="handle_scroll">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_delta" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_orientation" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_time" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_name">
        <callback name="get_icon_name">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="59"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="837">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="829">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_size">
        <callback name="get_icon_size">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1019">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="1013">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_label">
        <callback name="get_label">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="63"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="931">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata">
        <callback name="get_metadata">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="65"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1114">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="1106">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="67"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="786">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="778">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_primary_menu_is_open">
        <callback name="get_primary_menu_is_open">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1050">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="1044">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_secondary_menu_is_open">
        <callback name="get_secondary_menu_is_open">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="71"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1081">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="1075">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tooltip_text">
        <callback name="get_tooltip_text">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="73"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="888">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="880">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_visible">
        <callback name="get_visible">
          <source-position filename="../libxapp/xapp-statusicon-interface.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="988">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libxapp/xapp-statusicon-interface.c"
                   line="982">A #XAppStatusIconInterface.</doc>
              <type name="StatusIconInterface"
                    c:type="XAppStatusIconInterface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="StatusIconInterfaceProxy"
           c:symbol-prefix="status_icon_interface_proxy"
           c:type="XAppStatusIconInterfaceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="XAppStatusIconInterfaceProxy"
           glib:get-type="xapp_status_icon_interface_proxy_get_type"
           glib:type-struct="StatusIconInterfaceProxyClass">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="1565">The #XAppStatusIconInterfaceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="234"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="StatusIconInterface"/>
      <constructor name="new_finish"
                   c:identifier="xapp_status_icon_interface_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1953">Finishes an operation started with xapp_status_icon_interface_proxy_new().</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="250"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1960">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="StatusIconInterfaceProxy"
                c:type="XAppStatusIconInterface*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1955">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to xapp_status_icon_interface_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="xapp_status_icon_interface_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2043">Finishes an operation started with xapp_status_icon_interface_proxy_new_for_bus().</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="269"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="2050">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="StatusIconInterfaceProxy"
                c:type="XAppStatusIconInterface*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2045">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to xapp_status_icon_interface_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="xapp_status_icon_interface_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2068">Like xapp_status_icon_interface_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See xapp_status_icon_interface_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="272"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="2083">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="StatusIconInterfaceProxy"
                c:type="XAppStatusIconInterface*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2070">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2071">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2072">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2073">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2074">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="xapp_status_icon_interface_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1978">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See xapp_status_icon_interface_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="253"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="1993">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="StatusIconInterfaceProxy"
                c:type="XAppStatusIconInterface*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1980">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1981">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1982">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1983">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1984">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="xapp_status_icon_interface_proxy_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1923">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call xapp_status_icon_interface_proxy_new_finish() to get the result of the operation.

See xapp_status_icon_interface_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1925">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1926">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1927">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1928">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1929">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1930">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="1931">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="xapp_status_icon_interface_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2013">Like xapp_status_icon_interface_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call xapp_status_icon_interface_proxy_new_for_bus_finish() to get the result of the operation.

See xapp_status_icon_interface_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2015">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2016">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2017">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2018">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2019">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2020">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-statusicon-interface.c"
                 line="2021">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="StatusIconInterfaceProxyPrivate"
              c:type="XAppStatusIconInterfaceProxyPrivate*"/>
      </field>
    </class>
    <record name="StatusIconInterfaceProxyClass"
            c:type="XAppStatusIconInterfaceProxyClass"
            glib:is-gtype-struct-for="StatusIconInterfaceProxy">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="1571">Class structure for #XAppStatusIconInterfaceProxy.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="234"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="1573">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="StatusIconInterfaceProxyPrivate"
            c:type="XAppStatusIconInterfaceProxyPrivate"
            disguised="1">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="222"/>
    </record>
    <class name="StatusIconInterfaceSkeleton"
           c:symbol-prefix="status_icon_interface_skeleton"
           c:type="XAppStatusIconInterfaceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="XAppStatusIconInterfaceSkeleton"
           glib:get-type="xapp_status_icon_interface_skeleton_get_type"
           glib:type-struct="StatusIconInterfaceSkeletonClass">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2105">The #XAppStatusIconInterfaceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="304"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="StatusIconInterface"/>
      <constructor name="new"
                   c:identifier="xapp_status_icon_interface_skeleton_new">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2662">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt;.</doc>
        <source-position filename="../libxapp/xapp-statusicon-interface.h"
                         line="312"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="2667">The skeleton object.</doc>
          <type name="StatusIconInterfaceSkeleton"
                c:type="XAppStatusIconInterface*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="StatusIconInterfaceSkeletonPrivate"
              c:type="XAppStatusIconInterfaceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="StatusIconInterfaceSkeletonClass"
            c:type="XAppStatusIconInterfaceSkeletonClass"
            glib:is-gtype-struct-for="StatusIconInterfaceSkeleton">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2111">Class structure for #XAppStatusIconInterfaceSkeleton.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="304"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="2113">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="StatusIconInterfaceSkeletonPrivate"
            c:type="XAppStatusIconInterfaceSkeletonPrivate"
            disguised="1">
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="292"/>
    </record>
    <class name="StatusIconMonitor"
           c:symbol-prefix="status_icon_monitor"
           c:type="XAppStatusIconMonitor"
           parent="GObject.Object"
           glib:type-name="XAppStatusIconMonitor"
           glib:get-type="xapp_status_icon_monitor_get_type"
           glib:type-struct="StatusIconMonitorClass">
      <source-position filename="../libxapp/xapp-status-icon-monitor.h"
                       line="13"/>
      <constructor name="new"
                   c:identifier="xapp_status_icon_monitor_new"
                   version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon-monitor.c"
             line="557">Creates a new monitor.</doc>
        <source-position filename="../libxapp/xapp-status-icon-monitor.h"
                         line="15"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon-monitor.c"
               line="562">a new #XAppStatusIconMonitor. Use g_object_unref when finished.</doc>
          <type name="StatusIconMonitor" c:type="XAppStatusIconMonitor*"/>
        </return-value>
      </constructor>
      <method name="list_icons"
              c:identifier="xapp_status_icon_monitor_list_icons"
              version="1.6">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon-monitor.c"
             line="532">List known icon proxies.</doc>
        <source-position filename="../libxapp/xapp-status-icon-monitor.h"
                         line="16"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-status-icon-monitor.c"
               line="538">a #GList of icons</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="StatusIconMonitor"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon-monitor.c"
                 line="534">a #XAppStatusIconMonitor</doc>
            <type name="StatusIconMonitor" c:type="XAppStatusIconMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="icon-added" when="last" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon-monitor.c"
             line="474">This signal is emitted by the monitor when it has discovered a new
#XAppStatusIcon on the bus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon-monitor.c"
                 line="477">the interface proxy for the #XAppStatusIcon that has been added.</doc>
            <type name="StatusIconInterfaceProxy"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="icon-removed" when="last" action="1">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon-monitor.c"
             line="490">This signal is emitted by the monitor when an #XAppStatusIcon has disappeared
from the bus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-status-icon-monitor.c"
                 line="493">the #XAppStatusIcon proxy that has been removed.</doc>
            <type name="StatusIconInterfaceProxy"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StatusIconMonitorClass"
            c:type="XAppStatusIconMonitorClass"
            glib:is-gtype-struct-for="StatusIconMonitor">
      <source-position filename="../libxapp/xapp-status-icon-monitor.h"
                       line="13"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="StatusIconState"
                 glib:type-name="XAppStatusIconState"
                 glib:get-type="xapp_status_icon_state_get_type"
                 c:type="XAppStatusIconState">
      <member name="native"
              value="0"
              c:identifier="XAPP_STATUS_ICON_STATE_NATIVE"
              glib:nick="native"
              glib:name="XAPP_STATUS_ICON_STATE_NATIVE">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.h"
             line="17">The #XAppStatusIcon is currently being handled
by an #XAppStatusIconMonitor (usually in an applet).</doc>
      </member>
      <member name="fallback"
              value="1"
              c:identifier="XAPP_STATUS_ICON_STATE_FALLBACK"
              glib:nick="fallback"
              glib:name="XAPP_STATUS_ICON_STATE_FALLBACK">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.h"
             line="19">The #XAppStatusIcon is currently being handled
by a legacy system tray implementation (using GtkStatusIcon).</doc>
      </member>
      <member name="no_support"
              value="2"
              c:identifier="XAPP_STATUS_ICON_STATE_NO_SUPPORT"
              glib:nick="no-support"
              glib:name="XAPP_STATUS_ICON_STATE_NO_SUPPORT">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-status-icon.h"
             line="21">The #XAppStatusIcon is not currently being handled by any
kind of status icon implementation.</doc>
      </member>
    </enumeration>
    <class name="StyleManager"
           c:symbol-prefix="style_manager"
           c:type="XAppStyleManager"
           parent="GObject.Object"
           glib:type-name="XAppStyleManager"
           glib:get-type="xapp_style_manager_get_type"
           glib:type-struct="StyleManagerClass">
      <source-position filename="../libxapp/xapp-style-manager.h" line="9"/>
      <constructor name="new"
                   c:identifier="xapp_style_manager_new"
                   version="2.2">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-style-manager.c"
             line="147">Creates a new #XAppStyleManager instance</doc>
        <source-position filename="../libxapp/xapp-style-manager.h" line="11"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-style-manager.c"
               line="152">a new #XAppStyleManager. Use g_object_unref when finished.</doc>
          <type name="StyleManager" c:type="XAppStyleManager*"/>
        </return-value>
      </constructor>
      <method name="get_widget"
              c:identifier="xapp_style_manager_get_widget"
              glib:get-property="widget"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-style-manager.c"
             line="165">Gets the #GtkWidget the style manager currently applies styles to.</doc>
        <source-position filename="../libxapp/xapp-style-manager.h" line="13"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-style-manager.c"
               line="171">the #GtkWidget previously set on the style manager, or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="style_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="167">a #XAppStyleManager</doc>
            <type name="StyleManager" c:type="XAppStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_style_property"
              c:identifier="xapp_style_manager_remove_style_property"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-style-manager.c"
             line="238">Removes the given style property from the widget if set.</doc>
        <source-position filename="../libxapp/xapp-style-manager.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="240">a #XAppStyleManager</doc>
            <type name="StyleManager" c:type="XAppStyleManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="241">the property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_pango_font_string"
              c:identifier="xapp_style_manager_set_from_pango_font_string"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-style-manager.c"
             line="259">Sets the css font property on the widget based on the supplied pango font description string.</doc>
        <source-position filename="../libxapp/xapp-style-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="261">a #XAppStyleManager</doc>
            <type name="StyleManager" c:type="XAppStyleManager*"/>
          </instance-parameter>
          <parameter name="desc_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="262">a pango font description string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style_property"
              c:identifier="xapp_style_manager_set_style_property"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-style-manager.c"
             line="218">Adds the given style property to the widget. If the property has already been set, the value will be replaced.</doc>
        <source-position filename="../libxapp/xapp-style-manager.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="220">a #XAppStyleManager</doc>
            <type name="StyleManager" c:type="XAppStyleManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="221">the property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="222">the value to set the property to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_widget"
              c:identifier="xapp_style_manager_set_widget"
              glib:set-property="widget"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-style-manager.c"
             line="181">Sets the #GtkWidget the style manager will apply styles to.</doc>
        <source-position filename="../libxapp/xapp-style-manager.h" line="14"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="style_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="183">a #XAppStyleManager</doc>
            <type name="StyleManager" c:type="XAppStyleManager*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libxapp/xapp-style-manager.c"
                 line="184">the #GtkWidget that the style manager will apply styles to, or
%NULL to unset the current widget and remove all styles currently set by
this #XAppStyleManager instance.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="widget"
                writable="1"
                transfer-ownership="none"
                setter="set_widget"
                getter="get_widget">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-style-manager.c"
             line="132">The widget to be styled.</doc>
        <type name="Gtk.Widget"/>
      </property>
    </class>
    <record name="StyleManagerClass"
            c:type="XAppStyleManagerClass"
            glib:is-gtype-struct-for="StyleManager">
      <source-position filename="../libxapp/xapp-style-manager.h" line="9"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <docsection name="XAppObject">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2680">This section contains the #XAppObject, #XAppObjectProxy, and #XAppObjectSkeleton types which make it easier to work with objects implementing generated types for D-Bus interfaces.</doc>
    </docsection>
    <docsection name="XAppObjectManagerClient">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="2994">This section contains a #GDBusObjectManagerClient that uses xapp_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc.</doc>
    </docsection>
    <docsection name="XAppStatusIconInterface">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="159">This section contains code for working with the &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <function name="pango_font_string_to_css"
              c:identifier="xapp_pango_font_string_to_css"
              version="2.2">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-util.c"
           line="109">Converts a pango font description string to a string suitable for use with the css "font" tag. The font description must contain the font family and font size or conversion will fail and %NULL will be returned</doc>
      <source-position filename="../libxapp/xapp-util.h" line="11"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-util.c"
             line="115">the css compatible font string or %NULL if the conversion failed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="pango_font_string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-util.c"
               line="111">a pango font description string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_window_icon_from_file"
              c:identifier="xapp_set_window_icon_from_file"
              throws="1">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="586">Sets the icon name hint for a window manager (like muffin) to make
available when applications want to change their icons during runtime
without having to resort to the internal low-res pixbufs that GdkWindow
sets on the client side.  This also chains up and calls GtkWindow.set_icon_from_file
for convenience and compatibility.  Set to %NULL to unset.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="588">The #GtkWindow to set the icon name for</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="file_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="589">The icon path to set, or %NULL to unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_window_icon_name"
              c:identifier="xapp_set_window_icon_name">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="554">Sets the icon name hint for a window manager (like muffin) to make
available when applications want to change their icons during runtime
without having to resort to the internal low-res pixbufs that GdkWindow
sets on the client side.  This is a function, not a method, for taking
advantage of this feature with descendants of GtkWindows, such as
GtkDialogs.  Sets gtk_window_set_icon_name as well, to avoid needing
to have two calls each time.  Set to %NULL to unset.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="37"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="556">The #GtkWindow to set the icon name for</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="icon_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="557">The icon name to set, or %NULL to unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_window_progress"
              c:identifier="xapp_set_window_progress">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="617">Sets the progress hint for a window manager (like muffin) to make
available when applications want to display the application's progress
in some operation. The value sent to the WM will be clamped to
between 0 and 100.

Note: If a window will stick around after progress is complete, you will
probaby need to set progress to 0 to remove any progress effects on taskbars
and window lists.

Setting progress will also cancel the 'pulsing' flag on the window as
well, if it has been set.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="619">The #GtkWindow to set the progress for</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="progress" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="620">The value to set for progress.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_window_progress_pulse"
              c:identifier="xapp_set_window_progress_pulse">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="652">Sets the progress pulse hint hint for a window manager (like muffin)
to make available when applications want to display indeterminate or
ongoing progress in a task manager.

Note: If a window will stick around after progress is complete, you will
probaby need to set progress to 0 to remove any progress effects on taskbars
and window lists.  This will also remove the pulse state, if it is set.

Setting an explicit progress value will unset this flag.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="654">The #GtkWindow to set the progress for</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="pulse" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="655">Whether to have pulsing set or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_xid_icon_from_file"
              c:identifier="xapp_set_xid_icon_from_file">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="706">Sets the icon name hint for a window manager (like muffin) to make
available when applications want to change their icons during runtime
without having to resort to the internal low-res pixbufs that GdkWindow
sets on the client side.  This is a function, not a method, for applying
the icon name property for a given (possibly foreign) window, by passing
the window's XID.  Set to %NULL to unset.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="50"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="708">The Window to set the icon name for</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="file_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="709">The icon path to set, or %NULL to unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_xid_icon_name" c:identifier="xapp_set_xid_icon_name">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="685">Sets the icon name hint for a window manager (like muffin) to make
available when applications want to change their icons during runtime
without having to resort to the internal low-res pixbufs that GdkWindow
sets on the client side.  This is a function, not a method, for applying
the icon name property for a given (possibly foreign) window, by passing
the window's XID.  Set to %NULL to unset.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="687">The Window to set the icon name for</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="icon_name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="688">The icon name to set, or %NULL to unset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_xid_progress" c:identifier="xapp_set_xid_progress">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="728">Sets the progress hint for a window manager (like muffin) to make
available when applications want to display the application's progress
in some operation. The value sent to the WM will be clamped to
between 0 and 100.

Setting progress will also cancel the 'pulsing' flag on the window as
well, if it has been set.

Note: If a window will stick around after progress is complete, you will
probaby need to set progress to 0 to remove any progress effects on taskbars
and window lists.

This is a function, not a method, for applying the progress property for
a given (possibly foreign) window, by passing the window's XID.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="730">The Window to set the progress for</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="progress" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="731">The value to set for progress.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_xid_progress_pulse"
              c:identifier="xapp_set_xid_progress_pulse">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="758">Sets the progress pulse hint hint for a window manager (like muffin)
to make available when applications want to display indeterminate or
ongoing progress in a task manager.

Note: If a window will stick around after progress is complete, you will
probaby need to set progress to 0 to remove any progress effects on taskbars
and window lists.

Setting an explicit progress value will unset this flag.</doc>
      <source-position filename="../libxapp/xapp-gtk-window.h" line="54"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="760">The Window to set the progress for</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
        <parameter name="pulse" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-gtk-window.c"
               line="761">Whether to have pulsing set or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="status_icon_interface_interface_info"
              c:identifier="xapp_status_icon_interface_interface_info"
              moved-to="StatusIconInterface.interface_info">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="541">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-x-StatusIcon.top_of_page"&gt;org.x.StatusIcon&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="81"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="546">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="status_icon_interface_override_properties"
              c:identifier="xapp_status_icon_interface_override_properties"
              moved-to="StatusIconInterface.override_properties">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-statusicon-interface.c"
           line="554">Overrides all #GObject properties in the #XAppStatusIconInterface interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="../libxapp/xapp-statusicon-interface.h"
                       line="82"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-statusicon-interface.c"
             line="562">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="556">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libxapp/xapp-statusicon-interface.c"
               line="557">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_session_is_running"
              c:identifier="xapp_util_get_session_is_running"
              version="2.0">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-util.c"
           line="50">Check if the Session Manager is currently in the "Running" phase.</doc>
      <source-position filename="../libxapp/xapp-util.h" line="9"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-util.c"
             line="55">%TRUE if the session is running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="util_gpu_offload_supported"
              c:identifier="xapp_util_gpu_offload_supported"
              version="1.8">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-util.c"
           line="13">Performs a check to see if on-demand mode for discrete graphics
is supported.</doc>
      <source-position filename="../libxapp/xapp-util.h" line="8"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libxapp/xapp-util.c"
             line="19">%TRUE if supported.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <docsection name="xapp-favorites">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-favorites.c"
           line="31">The XAppFavorites class allows applications display frequently-used files and
provide a safe mechanism for launching them.

A list of #XAppFavoriteInfos can be retrieved in full, or only for specific mimetypes.

A favorites uri scheme is also available if the xapp gtk3 module is loaded and this also makes the
uri available as a shortcut in file dialogs.

XAppFavorites are new for 2.0</doc>
    </docsection>
    <docsection name="xapp-gtk-window">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-gtk-window.c"
           line="21">This widget is a simple subclass of GtkWindow that provides the following
additional capabilities:

- Ability to set an icon name or icon file path for the window manager to
  make use of, rather than relying on a desktop file or fixed-size window-
  backed icon that Gtk normally generates.  The window manager must support
  the NET_WM_XAPP_ICON_NAME hint.

- Ability to send progress info to the window manager, in the form of an integer,
  0-100, which can then be used to display this progress in some manner in a task
  manager or window list.  The window manager must support the NET_WM_XAPP_PROGRESS
  hint.

- Ability to signal a 'pulsing' progress state, of potentially indeterminate value,
  in the form of a boolean, which can be passed on to a window list.  The window
  manager must support the NET_WM_XAPP_PROGRESS_PULSE hint

Wrappers:

Also provided are corresponding wrapper functions for normal GtkWindows.
They are not class methods - they are called with the target widget as their first
argument.

For example:

win = Gtk.Window()
XApp.set_window_icon_name(win, "foobar")

These functions mirror those of the #XAppGtkWindow class, but allow the properties
to work with normal GtkWindows and descendants of GtkWindow.</doc>
    </docsection>
    <docsection name="xapp-icon-chooser-button">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-icon-chooser-button.c"
           line="7">The XAppIconChooserButton creates a button so that
the user can select an icon. When the button is clicked
it will open an XAppIconChooserDialog. The currently
selected icon will be displayed as the button image.</doc>
    </docsection>
    <docsection name="xapp-icon-chooser-dialog">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-icon-chooser-dialog.c"
           line="15">The XAppIconChooserDialog creates a dialog so that
the user can select an icon. It provides the ability
to browse by category, search by icon name, or select
from a specific file.</doc>
    </docsection>
    <docsection name="xapp-kbd-layout-controller">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-kbd-layout-controller.c"
           line="17">A GObject wrapper for Gkbd that provides additional UI element
support for keyboard layout flags and abbreviations, as well as
Wfacilities to distinguish regional and hardware-based variants
which might otherwise appear identical in a layout list.</doc>
    </docsection>
    <docsection name="xapp-monitor-blanker">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-monitor-blanker.c"
           line="15">The XAppMonitorBlanker widget that creates one or more
POPUP type GtkWindows that are used to blank unused
monitors in multiple monitor setups.</doc>
    </docsection>
    <docsection name="xapp-preferences-window">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-preferences-window.c"
           line="5">The XAppPreferencesWindow sets up a simple dialog
window with a GtkStack, GtkSidebarSwitcher, and
GtkActionBar. The stack switcher and action bar only
show when needed.</doc>
    </docsection>
    <docsection name="xapp-stack-sidebar">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-stack-sidebar.c"
           line="5">A XAppStackSidebar allows you to quickly and easily provide a
consistent "sidebar" object for your user interface

In order to use a XAppStackSidebar, you simply use a GtkStack to
organize your UI flow, and add the sidebar to your sidebar area. You
can use xapp_stack_sidebar_set_stack() to connect the #XAppStackSidebar
to the #GtkStack. The #XAppStackSidebar is an extended version of the
the #GtkStackSidebar that allows showing an icon in addition to the text.

# CSS nodes

XAppStackSidebar has a single CSS node with the name stacksidebar and
style class .sidebar

When circumstances require it, XAppStackSidebar adds the
.needs-attention style class to the widgets representing the stack
pages.</doc>
    </docsection>
    <docsection name="xapp-status-icon">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-status-icon.c"
           line="67">The XAppStatusIcon allows applications to share status info
about themselves. It replaces the obsolete and very similar
Gtk.StatusIcon widget.

If used in an environment where no applet is handling XAppStatusIcons,
the XAppStatusIcon delegates its calls to a Gtk.StatusIcon.</doc>
    </docsection>
    <docsection name="xapp-status-icon-monitor">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-status-icon-monitor.c"
           line="42">The XAppStatusIconMonitor is intended to be utilized by some status applet
to display info about an app.

The simplest way to use is to make a new instance of this monitor, and connect
to the #XAppStatusIconMonitor::icon-added and #XAppStatusIconMonitor::icon-removed signals.
The received object for both of these signals is an #XAppStatusIconInterfaceProxy.
It represents an application's #XAppStatusIcon, and has properties available for
describing the icon name, tooltip, label and visibility.

The proxy also provides methods to handle clicks, which can be called by the applet,
to request that the app display its menu.</doc>
    </docsection>
    <docsection name="xapp-style-manager">
      <doc xml:space="preserve"
           filename="../libxapp/xapp-style-manager.c"
           line="4">#XAppStyleManager is a convenience class designed to make it easier to programmatically add style information to a widget.</doc>
    </docsection>
  </namespace>
</repository>
