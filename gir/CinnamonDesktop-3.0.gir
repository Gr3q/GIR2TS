<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="CDesktopEnums" version="3.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="cinnamon-desktop"/>
  <namespace name="CinnamonDesktop"
             version="3.0"
             shared-library="libcinnamon-desktop.so.4"
             c:identifier-prefixes="Gnome"
             c:symbol-prefixes="gnome_">
    <class name="BG"
           c:symbol-prefix="bg"
           c:type="GnomeBG"
           parent="GObject.Object"
           glib:type-name="GnomeBG"
           glib:get-type="gnome_bg_get_type"
           glib:type-struct="BGClass">
      <source-position filename="../libcinnamon-desktop/gnome-bg.h" line="49"/>
      <constructor name="new" c:identifier="gnome_bg_new">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <type name="BG" c:type="GnomeBG*"/>
        </return-value>
      </constructor>
      <function name="get_surface_from_root"
                c:identifier="gnome_bg_get_surface_from_root">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg.c"
             line="1521">This function queries the _XROOTPMAP_ID property from
the root window associated with @screen to determine
the current root window background pixmap and returns
a copy of it. If the _XROOTPMAP_ID is not set, then
a black surface is returned.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg.c"
               line="1531">a #cairo_surface_t if successful or %NULL</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1523">a #GdkScreen</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_accountsservice_background"
                c:identifier="gnome_bg_set_accountsservice_background">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="background" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_surface_as_root"
                c:identifier="gnome_bg_set_surface_as_root">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg.c"
             line="1700">Set the root pixmap, and properties pointing to it. We
do this atomically with a server grab to make sure that
we won't leak the pixmap if somebody else it setting
it at the same time. (This assumes that they follow the
same conventions we do).  @surface should come from a call
to gnome_bg_create_surface().</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1702">the #GdkScreen to change root background on</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1703">the #cairo_surface_t to set root background from.
  Must be an xlib surface backing a pixmap.</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_surface_as_root_with_crossfade"
                c:identifier="gnome_bg_set_surface_as_root_with_crossfade">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg.c"
             line="1739">Set the root pixmap, and properties pointing to it.
This function differs from gnome_bg_set_surface_as_root()
in that it adds a subtle crossfade animation from the
current root pixmap to the new one.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="122"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg.c"
               line="1749">a #GnomeBGCrossfade object</doc>
          <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1741">the #GdkScreen to change root background on</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1742">the cairo xlib surface to set root background from</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </function>
      <method name="changes_with_time"
              c:identifier="gnome_bg_changes_with_time">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_and_set_gtk_image"
              c:identifier="gnome_bg_create_and_set_gtk_image">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="image" transfer-ownership="none">
            <type name="Gtk.Image" c:type="GtkImage*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_and_set_surface_as_root"
              c:identifier="gnome_bg_create_and_set_surface_as_root">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="root_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1788">the #GdkWindow</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1789">the #GdkScreen</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_frame_thumbnail"
              c:identifier="gnome_bg_create_frame_thumbnail">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg.c"
             line="3376">Creates a thumbnail for a certain frame, where 'frame' is somewhat
vaguely defined as 'suitable point to show while single-stepping
through the slideshow'.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg.c"
               line="3383">the newly created thumbnail or
or NULL if frame_num is out of bounds.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="frame_num" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_surface" c:identifier="gnome_bg_create_surface">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg.c"
             line="1230">Create a surface that can be set as background for @window. If @is_root is
TRUE, the surface created will be created by a temporary X server connection
so that if someone calls XKillClient on it, it won't affect the application
who created it.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg.c"
               line="1243">%NULL on error (e.g. out of X connections)</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg.c"
                 line="1232">GnomeBG</doc>
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_thumbnail" c:identifier="gnome_bg_create_thumbnail">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg.c"
               line="1491">a #GdkPixbuf showing the background as a thumbnail</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw" c:identifier="gnome_bg_draw">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="is_root" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color" c:identifier="gnome_bg_get_color">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="CDesktopEnums.BackgroundShading"
                  c:type="CDesktopBackgroundShading*"/>
          </parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="secondary" transfer-ownership="none">
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_filename" c:identifier="gnome_bg_get_filename">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image_size" c:identifier="gnome_bg_get_image_size">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </parameter>
          <parameter name="best_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="best_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_placement" c:identifier="gnome_bg_get_placement">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="CDesktopEnums.BackgroundStyle"
                c:type="CDesktopBackgroundStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_multiple_sizes"
              c:identifier="gnome_bg_has_multiple_sizes">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_dark" c:identifier="gnome_bg_is_dark">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_preferences"
              c:identifier="gnome_bg_load_from_preferences">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_preferences"
              c:identifier="gnome_bg_save_to_preferences">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color" c:identifier="gnome_bg_set_color">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="CDesktopEnums.BackgroundShading"
                  c:type="CDesktopBackgroundShading"/>
          </parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
          <parameter name="secondary" transfer-ownership="none">
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename" c:identifier="gnome_bg_set_filename">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_placement" c:identifier="gnome_bg_set_placement">
        <source-position filename="../libcinnamon-desktop/gnome-bg.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="GnomeBG*"/>
          </instance-parameter>
          <parameter name="placement" transfer-ownership="none">
            <type name="CDesktopEnums.BackgroundStyle"
                  c:type="CDesktopBackgroundStyle"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="transitioned" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BGClass"
            c:type="GnomeBGClass"
            disguised="1"
            glib:is-gtype-struct-for="BG">
      <source-position filename="../libcinnamon-desktop/gnome-bg.h" line="49"/>
    </record>
    <class name="BGCrossfade"
           c:symbol-prefix="bg_crossfade"
           c:type="GnomeBGCrossfade"
           parent="GObject.Object"
           glib:type-name="GnomeBGCrossfade"
           glib:get-type="gnome_bg_crossfade_get_type"
           glib:type-struct="BGCrossfadeClass">
      <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                       line="59"/>
      <constructor name="new" c:identifier="gnome_bg_crossfade_new">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="212">Creates a new object to manage crossfading a
window background between two #cairo_surface_ts.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
               line="220">the new #GnomeBGCrossfade</doc>
          <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="214">The width of the crossfading window</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="215">The height of the crossfading window</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="finished">
        <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="is_started" c:identifier="gnome_bg_crossfade_is_started">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="540">This function reveals whether or not @fade is currently
running on a window.  See gnome_bg_crossfade_start() for
information on how to initiate a crossfade.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
               line="548">%TRUE if fading, or %FALSE if not fading</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="542">a #GnomeBGCrossfade</doc>
            <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_end_surface"
              c:identifier="gnome_bg_crossfade_set_end_surface">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="322">Before initiating a crossfade with gnome_bg_crossfade_start()
a start and end surface have to be set.  This function sets
the surface shown at the end of the crossfade effect.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
               line="331">%TRUE if successful, or %FALSE if the surface
could not be copied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="324">a #GnomeBGCrossfade</doc>
            <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
          </instance-parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="325">The cairo surface to fade to</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_surface"
              c:identifier="gnome_bg_crossfade_set_start_surface">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="277">Before initiating a crossfade with gnome_bg_crossfade_start()
a start and end surface have to be set.  This function sets
the surface shown at the beginning of the crossfade effect.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
               line="286">%TRUE if successful, or %FALSE if the surface
could not be copied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="279">a #GnomeBGCrossfade</doc>
            <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
          </instance-parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="280">The cairo surface to fade from</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="gnome_bg_crossfade_start">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="492">This function initiates a quick crossfade between two surfaces on
the background of @window.  Before initiating the crossfade both
gnome_bg_crossfade_start() and gnome_bg_crossfade_end() need to
be called. If animations are disabled, the crossfade is skipped,
and the window background is set immediately to the end surface.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="494">a #GnomeBGCrossfade</doc>
            <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="495">The #GdkWindow to draw crossfade on</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="gnome_bg_crossfade_stop">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="558">This function stops any in progress crossfades that may be
happening.  It's harmless to call this function if @fade is
already stopped.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="560">a #GnomeBGCrossfade</doc>
            <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="171">When a crossfade is running, this is height of the fading
surface.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="157">When a crossfade is running, this is width of the fading
surface.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BGCrossfadePrivate" c:type="GnomeBGCrossfadePrivate*"/>
      </field>
      <glib:signal name="finished" when="last">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
             line="184">When a crossfade finishes, @window will have a copy
of the end surface as its background, and this signal will
get emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-bg-crossfade.c"
                 line="187">the #GdkWindow the crossfade happend on.</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BGCrossfadeClass"
            c:type="GnomeBGCrossfadeClass"
            glib:is-gtype-struct-for="BGCrossfade">
      <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                       line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="finished">
        <callback name="finished">
          <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fade" transfer-ownership="none">
              <type name="BGCrossfade" c:type="GnomeBGCrossfade*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BGCrossfadePrivate"
            c:type="GnomeBGCrossfadePrivate"
            disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-bg-crossfade.h"
                       line="43"/>
    </record>
    <class name="DesktopThumbnailFactory"
           c:symbol-prefix="desktop_thumbnail_factory"
           c:type="GnomeDesktopThumbnailFactory"
           parent="GObject.Object"
           glib:type-name="GnomeDesktopThumbnailFactory"
           glib:get-type="gnome_desktop_thumbnail_factory_get_type"
           glib:type-struct="DesktopThumbnailFactoryClass">
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="63"/>
      <constructor name="new"
                   c:identifier="gnome_desktop_thumbnail_factory_new"
                   version="2.2">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="867">Creates a new #GnomeDesktopThumbnailFactory.

This function must be called on the main thread.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="875">a new #GnomeDesktopThumbnailFactory</doc>
          <type name="DesktopThumbnailFactory"
                c:type="GnomeDesktopThumbnailFactory*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="869">The thumbnail size to use</doc>
            <type name="DesktopThumbnailSize"
                  c:type="GnomeDesktopThumbnailSize"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="can_thumbnail"
              c:identifier="gnome_desktop_thumbnail_factory_can_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1063">Returns TRUE if this GnomeIconFactory can (at least try) to thumbnail
this file. Thumbnails or files with failed thumbnails won't be thumbnailed.

Usage of this function is threadsafe.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1075">TRUE if the file can be thumbnailed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1065">a #GnomeDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1066">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1067">the mime type of the file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1068">the mtime of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_failed_thumbnail"
              c:identifier="gnome_desktop_thumbnail_factory_create_failed_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1546">Creates a failed thumbnail for the file so that we don't try
to re-thumbnail the file later.

Usage of this function is threadsafe.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1548">a #GnomeDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1549">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1550">the modification time of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_thumbnail"
              c:identifier="gnome_desktop_thumbnail_factory_generate_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1192">Tries to generate a thumbnail for the specified file. If it succeeds
it returns a pixbuf that can be used as a thumbnail.

Usage of this function is threadsafe.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                         line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1203">thumbnail pixbuf if thumbnailing succeeded, %NULL otherwise.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1194">a #GnomeDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1195">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1196">the mime type of the file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_valid_failed_thumbnail"
              c:identifier="gnome_desktop_thumbnail_factory_has_valid_failed_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="953">Tries to locate an failed thumbnail for the file specified. Writing
and looking for failed thumbnails is important to avoid to try to
thumbnail e.g. broken images several times.

Usage of this function is threadsafe.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="965">TRUE if there is a failed thumbnail for the file.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="955">a #GnomeDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="956">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="957">the mtime of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup"
              c:identifier="gnome_desktop_thumbnail_factory_lookup"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="891">Tries to locate an existing thumbnail for the file specified.

Usage of this function is threadsafe.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="901">The absolute path of the thumbnail, or %NULL if none exist.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="893">a #GnomeDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="894">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="895">the mtime of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_thumbnail"
              c:identifier="gnome_desktop_thumbnail_factory_save_thumbnail"
              version="2.2">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1433">Saves @thumbnail at the right place. If the save fails a
failed thumbnail is written.

Usage of this function is threadsafe.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1435">a #GnomeDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="GnomeDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="thumbnail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1436">the thumbnail as a pixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1437">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="original_mtime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
                 line="1438">the modification time of the original file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DesktopThumbnailFactoryPrivate"
              c:type="GnomeDesktopThumbnailFactoryPrivate*"/>
      </field>
    </class>
    <record name="DesktopThumbnailFactoryClass"
            c:type="GnomeDesktopThumbnailFactoryClass"
            glib:is-gtype-struct-for="DesktopThumbnailFactory">
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="63"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DesktopThumbnailFactoryPrivate"
            c:type="GnomeDesktopThumbnailFactoryPrivate"
            disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="53"/>
    </record>
    <enumeration name="DesktopThumbnailSize"
                 c:type="GnomeDesktopThumbnailSize">
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="43"/>
      <member name="normal"
              value="0"
              c:identifier="GNOME_DESKTOP_THUMBNAIL_SIZE_NORMAL">
      </member>
      <member name="large"
              value="1"
              c:identifier="GNOME_DESKTOP_THUMBNAIL_SIZE_LARGE">
      </member>
    </enumeration>
    <callback name="InstallerClientCallback"
              c:type="GnomeInstallerClientCallback">
      <source-position filename="../libcinnamon-desktop/gnome-installer.h"
                       line="23"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="success" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="PnpIds"
           c:symbol-prefix="pnp_ids"
           c:type="GnomePnpIds"
           parent="GObject.Object"
           glib:type-name="GnomePnpIds"
           glib:get-type="gnome_pnp_ids_get_type"
           glib:type-struct="PnpIdsClass">
      <source-position filename="../libcinnamon-desktop/gnome-pnp-ids.h"
                       line="48"/>
      <constructor name="new" c:identifier="gnome_pnp_ids_new">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-pnp-ids.c"
             line="316">Returns a reference to a #GnomePnpIds object, or creates
a new one if none have been created.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-pnp-ids.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-pnp-ids.c"
               line="322">a #GnomePnpIds object.</doc>
          <type name="PnpIds" c:type="GnomePnpIds*"/>
        </return-value>
      </constructor>
      <method name="get_pnp_id" c:identifier="gnome_pnp_ids_get_pnp_id">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-pnp-ids.c"
             line="245">Find the full manufacturer name for the given PNP ID.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-pnp-ids.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-pnp-ids.c"
               line="252">a new string representing the manufacturer name,
or %NULL when not found.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pnp_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-pnp-ids.c"
                 line="247">a #GnomePnpIds object</doc>
            <type name="PnpIds" c:type="GnomePnpIds*"/>
          </instance-parameter>
          <parameter name="pnp_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-pnp-ids.c"
                 line="248">the PNP ID to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="PnpIdsPrivate" c:type="GnomePnpIdsPrivate*"/>
      </field>
    </class>
    <record name="PnpIdsClass"
            c:type="GnomePnpIdsClass"
            glib:is-gtype-struct-for="PnpIds">
      <source-position filename="../libcinnamon-desktop/gnome-pnp-ids.h"
                       line="48"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="PnpIdsPrivate" c:type="GnomePnpIdsPrivate" disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-pnp-ids.h"
                       line="35"/>
    </record>
    <class name="RRConfig"
           c:symbol-prefix="rr_config"
           c:type="GnomeRRConfig"
           parent="GObject.Object"
           glib:type-name="GnomeRRConfig"
           glib:get-type="gnome_rr_config_get_type"
           glib:type-struct="RRConfigClass">
      <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                       line="100"/>
      <constructor name="new_current"
                   c:identifier="gnome_rr_config_new_current"
                   throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="111"/>
        <return-value transfer-ownership="full">
          <type name="RRConfig" c:type="GnomeRRConfig*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_stored"
                   c:identifier="gnome_rr_config_new_stored"
                   throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="113"/>
        <return-value transfer-ownership="full">
          <type name="RRConfig" c:type="GnomeRRConfig*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="apply_from_filename_with_time"
                c:identifier="gnome_rr_config_apply_from_filename_with_time"
                throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_backup_filename"
                c:identifier="gnome_rr_config_get_backup_filename">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="147"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </function>
      <function name="get_intended_filename"
                c:identifier="gnome_rr_config_get_intended_filename">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="148"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </function>
      <method name="applicable"
              c:identifier="gnome_rr_config_applicable"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_with_time"
              c:identifier="gnome_rr_config_apply_with_time"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_primary"
              c:identifier="gnome_rr_config_ensure_primary">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gnome_rr_config_equal">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config1" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
          <parameter name="config2" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_clone" c:identifier="gnome_rr_config_get_clone">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr-config.c"
               line="1397">whether at least two outputs are at (0, 0) offset and they
have the same width/height.  Those outputs are of course connected and on
(i.e. they have a CRTC assigned).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_outputs" c:identifier="gnome_rr_config_get_outputs">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr-config.c"
               line="1384">the output configuration for this #GnomeRRConfig</doc>
          <array c:type="GnomeRROutputInfo**">
            <type name="RROutputInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_current"
              c:identifier="gnome_rr_config_load_current"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_filename"
              c:identifier="gnome_rr_config_load_filename"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="gnome_rr_config_match">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config1" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
          <parameter name="config2" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sanitize" c:identifier="gnome_rr_config_sanitize">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="gnome_rr_config_save" throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_clone" c:identifier="gnome_rr_config_set_clone">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </instance-parameter>
          <parameter name="clone" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="screen"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="RRScreen"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RRConfigPrivate" c:type="GnomeRRConfigPrivate*"/>
      </field>
    </class>
    <record name="RRConfigClass"
            c:type="GnomeRRConfigClass"
            glib:is-gtype-struct-for="RRConfig">
      <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                       line="100"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RRConfigPrivate" c:type="GnomeRRConfigPrivate" disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                       line="38"/>
    </record>
    <record name="RRCrtc"
            c:type="GnomeRRCrtc"
            glib:type-name="GnomeRRCrtc"
            glib:get-type="gnome_rr_crtc_get_type"
            c:symbol-prefix="rr_crtc">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="36"/>
      <method name="can_drive_output"
              c:identifier="gnome_rr_crtc_can_drive_output">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_mode"
              c:identifier="gnome_rr_crtc_get_current_mode">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="206"/>
        <return-value transfer-ownership="full">
          <type name="RRMode" c:type="GnomeRRMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_rotation"
              c:identifier="gnome_rr_crtc_get_current_rotation">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="210"/>
        <return-value transfer-ownership="none">
          <type name="RRRotation" c:type="GnomeRRRotation"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gamma" c:identifier="gnome_rr_crtc_get_gamma">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="215"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="red" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short**"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short**"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gnome_rr_crtc_get_id">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="193"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gnome_rr_crtc_get_position">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="207"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rotations" c:identifier="gnome_rr_crtc_get_rotations">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <type name="RRRotation" c:type="GnomeRRRotation"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_config_with_time"
              c:identifier="gnome_rr_crtc_set_config_with_time"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="195"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </parameter>
          <parameter name="rotation" transfer-ownership="none">
            <type name="RRRotation" c:type="GnomeRRRotation"/>
          </parameter>
          <parameter name="outputs" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput**"/>
          </parameter>
          <parameter name="n_outputs" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gamma" c:identifier="gnome_rr_crtc_set_gamma">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="red" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short*"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short*"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_rotation"
              c:identifier="gnome_rr_crtc_supports_rotation">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </instance-parameter>
          <parameter name="rotation" transfer-ownership="none">
            <type name="RRRotation" c:type="GnomeRRRotation"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RRDpmsMode" c:type="GnomeRRDpmsMode">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="71"/>
      <member name="on" value="0" c:identifier="GNOME_RR_DPMS_ON">
      </member>
      <member name="standby" value="1" c:identifier="GNOME_RR_DPMS_STANDBY">
      </member>
      <member name="suspend" value="2" c:identifier="GNOME_RR_DPMS_SUSPEND">
      </member>
      <member name="off" value="3" c:identifier="GNOME_RR_DPMS_OFF">
      </member>
      <member name="disabled" value="4" c:identifier="GNOME_RR_DPMS_DISABLED">
      </member>
      <member name="unknown" value="5" c:identifier="GNOME_RR_DPMS_UNKNOWN">
      </member>
    </enumeration>
    <enumeration name="RRError"
                 c:type="GnomeRRError"
                 glib:error-domain="gnome-rr-error-quark">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="87"/>
      <member name="unknown" value="0" c:identifier="GNOME_RR_ERROR_UNKNOWN">
      </member>
      <member name="no_randr_extension"
              value="1"
              c:identifier="GNOME_RR_ERROR_NO_RANDR_EXTENSION">
      </member>
      <member name="randr_error"
              value="2"
              c:identifier="GNOME_RR_ERROR_RANDR_ERROR">
      </member>
      <member name="bounds_error"
              value="3"
              c:identifier="GNOME_RR_ERROR_BOUNDS_ERROR">
      </member>
      <member name="crtc_assignment"
              value="4"
              c:identifier="GNOME_RR_ERROR_CRTC_ASSIGNMENT">
      </member>
      <member name="no_matching_config"
              value="5"
              c:identifier="GNOME_RR_ERROR_NO_MATCHING_CONFIG">
      </member>
      <member name="no_dpms_extension"
              value="6"
              c:identifier="GNOME_RR_ERROR_NO_DPMS_EXTENSION">
      </member>
    </enumeration>
    <class name="RRLabeler"
           c:symbol-prefix="rr_labeler"
           c:type="GnomeRRLabeler"
           parent="GObject.Object"
           glib:type-name="GnomeRRLabeler"
           glib:get-type="gnome_rr_labeler_get_type"
           glib:type-struct="RRLabelerClass">
      <source-position filename="../libcinnamon-desktop/gnome-rr-labeler.h"
                       line="55"/>
      <constructor name="new" c:identifier="gnome_rr_labeler_new">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr-labeler.c"
             line="489">Create a GUI element that will display colored labels on each connected monitor.
This is useful when users are required to identify which monitor is which, e.g. for
for configuring multiple monitors.
The labels will be shown by default, use gnome_rr_labeler_hide to hide them.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr-labeler.h"
                         line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr-labeler.c"
               line="498">A new #GnomeRRLabeler</doc>
          <type name="RRLabeler" c:type="GnomeRRLabeler*"/>
        </return-value>
        <parameters>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-labeler.c"
                 line="491">Configuration of the screens to label</doc>
            <type name="RRConfig" c:type="GnomeRRConfig*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_rgba_for_output"
              c:identifier="gnome_rr_labeler_get_rgba_for_output">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr-labeler.c"
             line="571">Get the color used for the label on a given output (monitor).</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr-labeler.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="labeler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-labeler.c"
                 line="573">A #GnomeRRLabeler</doc>
            <type name="RRLabeler" c:type="GnomeRRLabeler*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-labeler.c"
                 line="574">Output device (i.e. monitor) to query</doc>
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </parameter>
          <parameter name="rgba_out"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-labeler.c"
                 line="575">Color of selected monitor.</doc>
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="gnome_rr_labeler_hide">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr-labeler.c"
             line="543">Hide ouput labels.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr-labeler.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="labeler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-labeler.c"
                 line="545">A #GnomeRRLabeler</doc>
            <type name="RRLabeler" c:type="GnomeRRLabeler*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="gnome_rr_labeler_show">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr-labeler.c"
             line="508">Show the labels.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr-labeler.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="labeler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-labeler.c"
                 line="510">A #GnomeRRLabeler</doc>
            <type name="RRLabeler" c:type="GnomeRRLabeler*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="config"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="RRConfig"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RRLabelerPrivate" c:type="GnomeRRLabelerPrivate*"/>
      </field>
    </class>
    <record name="RRLabelerClass"
            c:type="GnomeRRLabelerClass"
            glib:is-gtype-struct-for="RRLabeler">
      <source-position filename="../libcinnamon-desktop/gnome-rr-labeler.h"
                       line="55"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RRLabelerPrivate"
            c:type="GnomeRRLabelerPrivate"
            disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-rr-labeler.h"
                       line="44"/>
    </record>
    <record name="RRMode"
            c:type="GnomeRRMode"
            glib:type-name="GnomeRRMode"
            glib:get-type="gnome_rr_mode_get_type"
            c:symbol-prefix="rr_mode">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="37"/>
      <method name="get_freq" c:identifier="gnome_rr_mode_get_freq">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="190"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="gnome_rr_mode_get_height">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="189"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gnome_rr_mode_get_id">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="187"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="gnome_rr_mode_get_width">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="RROutput"
            c:type="GnomeRROutput"
            glib:type-name="GnomeRROutput"
            glib:get-type="gnome_rr_output_get_type"
            c:symbol-prefix="rr_output">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="35"/>
      <method name="can_clone" c:identifier="gnome_rr_output_can_clone">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
          <parameter name="clone" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_backlight"
              c:identifier="gnome_rr_output_get_backlight"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1772">The currently set backlight brightness</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backlight_max"
              c:identifier="gnome_rr_output_get_backlight_max">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1760">The maximum backlight value, or -1 if not supported</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backlight_min"
              c:identifier="gnome_rr_output_get_backlight_min">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1748">The mimimum backlight value, or -1 if not supported</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connector_type"
              c:identifier="gnome_rr_output_get_connector_type">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crtc" c:identifier="gnome_rr_output_get_crtc">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="172"/>
        <return-value transfer-ownership="full">
          <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_mode"
              c:identifier="gnome_rr_output_get_current_mode">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="171"/>
        <return-value transfer-ownership="full">
          <type name="RRMode" c:type="GnomeRRMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_edid_data"
              c:identifier="gnome_rr_output_get_edid_data">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_height_mm"
              c:identifier="gnome_rr_output_get_height_mm">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gnome_rr_output_get_id">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ids_from_edid"
              c:identifier="gnome_rr_output_get_ids_from_edid">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
          <parameter name="vendor" transfer-ownership="none">
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="product" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="serial" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_primary"
              c:identifier="gnome_rr_output_get_is_primary">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gnome_rr_output_get_name">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="gnome_rr_output_get_position">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_possible_crtcs"
              c:identifier="gnome_rr_output_get_possible_crtcs">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="170"/>
        <return-value transfer-ownership="full">
          <type name="RRCrtc" c:type="GnomeRRCrtc**"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_mode"
              c:identifier="gnome_rr_output_get_preferred_mode">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="181"/>
        <return-value transfer-ownership="full">
          <type name="RRMode" c:type="GnomeRRMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size_inches"
              c:identifier="gnome_rr_output_get_size_inches">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width_mm" c:identifier="gnome_rr_output_get_width_mm">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="outout" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connected" c:identifier="gnome_rr_output_is_connected">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_laptop" c:identifier="gnome_rr_output_is_laptop">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="174"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_modes" c:identifier="gnome_rr_output_list_modes">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="180"/>
        <return-value transfer-ownership="full">
          <type name="RRMode" c:type="GnomeRRMode**"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_backlight"
              c:identifier="gnome_rr_output_set_backlight"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1834">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1832">the absolute value which is min &gt;= this &lt;= max</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_mode"
              c:identifier="gnome_rr_output_supports_mode">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="RROutputInfo"
           c:symbol-prefix="rr_output_info"
           c:type="GnomeRROutputInfo"
           parent="GObject.Object"
           glib:type-name="GnomeRROutputInfo"
           glib:get-type="gnome_rr_output_info_get_type"
           glib:type-struct="RROutputInfoClass">
      <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                       line="51"/>
      <method name="get_aspect_ratio"
              c:identifier="gnome_rr_output_info_get_aspect_ratio">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="gnome_rr_output_info_get_display_name">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr-output-info.c"
               line="209">the display name of this output</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_geometry"
              c:identifier="gnome_rr_output_info_get_geometry">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-output-info.c"
                 line="99">a #GnomeRROutputInfo</doc>
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gnome_rr_output_info_get_name">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr-output-info.c"
               line="69">the output name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_height"
              c:identifier="gnome_rr_output_info_get_preferred_height">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_width"
              c:identifier="gnome_rr_output_info_get_preferred_width">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary"
              c:identifier="gnome_rr_output_info_get_primary">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_product"
              c:identifier="gnome_rr_output_info_get_product">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_rate"
              c:identifier="gnome_rr_output_info_get_refresh_rate">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rotation"
              c:identifier="gnome_rr_output_info_get_rotation">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="RRRotation" c:type="GnomeRRRotation"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial" c:identifier="gnome_rr_output_info_get_serial">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor" c:identifier="gnome_rr_output_info_get_vendor">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr-output-info.c"
                 line="171">a #GnomeRROutputInfo</doc>
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
          <parameter name="vendor"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <array zero-terminated="0" c:type="gchar*" fixed-size="4">
              <type name="utf8" c:type="gchar"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="is_active" c:identifier="gnome_rr_output_info_is_active">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr-output-info.c"
               line="81">whether there is a CRTC assigned to this output (i.e. a signal is being sent to it)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connected"
              c:identifier="gnome_rr_output_info_is_connected">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr-output-info.c"
               line="160">whether the output is physically connected to a monitor</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active" c:identifier="gnome_rr_output_info_set_active">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_geometry"
              c:identifier="gnome_rr_output_info_set_geometry">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary"
              c:identifier="gnome_rr_output_info_set_primary">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_refresh_rate"
              c:identifier="gnome_rr_output_info_set_refresh_rate">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
          <parameter name="rate" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rotation"
              c:identifier="gnome_rr_output_info_set_rotation">
        <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="GnomeRROutputInfo*"/>
          </instance-parameter>
          <parameter name="rotation" transfer-ownership="none">
            <type name="RRRotation" c:type="GnomeRRRotation"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RROutputInfoPrivate" c:type="GnomeRROutputInfoPrivate*"/>
      </field>
    </class>
    <record name="RROutputInfoClass"
            c:type="GnomeRROutputInfoClass"
            glib:is-gtype-struct-for="RROutputInfo">
      <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                       line="51"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RROutputInfoPrivate"
            c:type="GnomeRROutputInfoPrivate"
            disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-rr-config.h"
                       line="37"/>
    </record>
    <bitfield name="RRRotation" c:type="GnomeRRRotation">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="62"/>
      <member name="rotation_next"
              value="0"
              c:identifier="GNOME_RR_ROTATION_NEXT">
      </member>
      <member name="rotation_0" value="1" c:identifier="GNOME_RR_ROTATION_0">
      </member>
      <member name="rotation_90" value="2" c:identifier="GNOME_RR_ROTATION_90">
      </member>
      <member name="rotation_180"
              value="4"
              c:identifier="GNOME_RR_ROTATION_180">
      </member>
      <member name="rotation_270"
              value="8"
              c:identifier="GNOME_RR_ROTATION_270">
      </member>
      <member name="reflect_x" value="16" c:identifier="GNOME_RR_REFLECT_X">
      </member>
      <member name="reflect_y" value="32" c:identifier="GNOME_RR_REFLECT_Y">
      </member>
    </bitfield>
    <class name="RRScreen"
           c:symbol-prefix="rr_screen"
           c:type="GnomeRRScreen"
           parent="GObject.Object"
           glib:type-name="GnomeRRScreen"
           glib:get-type="gnome_rr_screen_get_type"
           glib:type-struct="RRScreenClass">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="51"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="gnome_rr_screen_new" throws="1">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="948">Creates a unique #GnomeRRScreen instance for the specified @screen.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="955">a unique #GnomeRRScreen instance, specific to the @screen, or NULL
if this could not be created, for instance if the driver does not support
Xrandr 1.2.  Each #GdkScreen thus has a single instance of #GnomeRRScreen.</doc>
          <type name="RRScreen" c:type="GnomeRRScreen*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="950">the #GdkScreen on which to operate</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="create_clone_modes"
              c:identifier="gnome_rr_screen_create_clone_modes">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="139"/>
        <return-value transfer-ownership="full">
          <type name="RRMode" c:type="GnomeRRMode**"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crtc_by_id"
              c:identifier="gnome_rr_screen_get_crtc_by_id">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1354">the CRTC identified by @id</doc>
          <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dpms_mode"
              c:identifier="gnome_rr_screen_get_dpms_mode"
              throws="1">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RRDpmsMode" c:type="GnomeRRDpmsMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_output_by_id"
              c:identifier="gnome_rr_screen_get_output_by_id">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1380">the output identified by @id</doc>
          <type name="RROutput" c:type="GnomeRROutput*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_output_by_name"
              c:identifier="gnome_rr_screen_get_output_by_name">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1881">the output identified by @name</doc>
          <type name="RROutput" c:type="GnomeRROutput*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ranges" c:identifier="gnome_rr_screen_get_ranges">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="999">Get the ranges of the screen</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1001">a #GnomeRRScreen</doc>
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="min_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1002">the minimum width</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="max_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1003">the maximum width</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="min_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1004">the minimum height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="max_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1005">the maximum height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_timestamps"
              c:identifier="gnome_rr_screen_get_timestamps">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="1035">Queries the two timestamps that the X RANDR extension maintains.  The X
server will prevent change requests for stale configurations, those whose
timestamp is not equal to that of the latest request for configuration.  The
X server will also prevent change requests that have an older timestamp to
the latest change request.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1037">a #GnomeRRScreen</doc>
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="change_timestamp_ret"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1038">Location in which to store the timestamp at which the RANDR configuration was last changed</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="config_timestamp_ret"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1039">Location in which to store the timestamp at which the RANDR configuration was last obtained</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_clone_modes"
              c:identifier="gnome_rr_screen_list_clone_modes">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="1303">List available XRandR clone modes</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <array c:type="GnomeRRMode**">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_crtcs" c:identifier="gnome_rr_screen_list_crtcs">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="1319">List all CRTCs</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <array c:type="GnomeRRCrtc**">
            <type name="RRCrtc" c:type="GnomeRRCrtc*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_modes" c:identifier="gnome_rr_screen_list_modes">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="1287">List available XRandR modes</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <array c:type="GnomeRRMode**">
            <type name="RRMode" c:type="GnomeRRMode*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_outputs" c:identifier="gnome_rr_screen_list_outputs">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="1335">List all outputs</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <array c:type="GnomeRROutput**">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="gnome_rr_screen_refresh" throws="1">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="1112">Refreshes the screen configuration, and calls the screen's callback if it
exists and if the screen's configuration changed.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-rr.c"
               line="1120">TRUE if the screen's configuration changed; otherwise, the
function returns FALSE and a NULL error if the configuration didn't change,
or FALSE and a non-NULL error if there was an error while refreshing the
configuration.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="1114">a #GnomeRRScreen</doc>
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_dpms_mode"
              c:identifier="gnome_rr_screen_set_dpms_mode"
              throws="1">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="1225">This method also disables the DPMS timeouts.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RRDpmsMode" c:type="GnomeRRDpmsMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary_output"
              c:identifier="gnome_rr_screen_set_primary_output">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="GnomeRROutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="gnome_rr_screen_set_size">
        <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="GnomeRRScreen*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="mm_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="mm_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="gdk-screen"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gdk.Screen"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RRScreenPrivate" c:type="GnomeRRScreenPrivate*"/>
      </field>
      <glib:signal name="changed" when="first" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="output-connected"
                   when="first"
                   no-recurse="1"
                   no-hooks="1">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="865">This signal is emitted when a display device is connected to a
port, or a port is hotplugged with an active output. The latter
can happen if a laptop is docked, and the dock provides a new
active output.

The @output value is not a #GObject. The returned @output value can
only assume to be valid during the emission of the signal (i.e. within
your signal handler only), as it may change later when the @screen
is modified due to an event from the X server, or due to another
place in the application modifying the @screen and the @output.
Therefore, deal with changes to the @output right in your signal
handler, instead of keeping the @output reference for an async or
idle function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="output"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="868">the #GnomeRROutput that was connected</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="output-disconnected"
                   when="first"
                   no-recurse="1"
                   no-hooks="1">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="894">This signal is emitted when a display device is disconnected from
a port, or a port output is hot-unplugged. The latter can happen
if a laptop is undocked, and the dock provided the output.

The @output value is not a #GObject. The returned @output value can
only assume to be valid during the emission of the signal (i.e. within
your signal handler only), as it may change later when the @screen
is modified due to an event from the X server, or due to another
place in the application modifying the @screen and the @output.
Therefore, deal with changes to the @output right in your signal
handler, instead of keeping the @output reference for an async or
idle function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="output"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-rr.c"
                 line="897">the #GnomeRROutput that was disconnected</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RRScreenClass"
            c:type="GnomeRRScreenClass"
            glib:is-gtype-struct-for="RRScreen">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="51"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="output_connected">
        <callback name="output_connected">
          <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="output" transfer-ownership="none">
              <type name="RROutput" c:type="GnomeRROutput*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="output_disconnected">
        <callback name="output_disconnected">
          <source-position filename="../libcinnamon-desktop/gnome-rr.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="output" transfer-ownership="none">
              <type name="RROutput" c:type="GnomeRROutput*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="RRScreenPrivate" c:type="GnomeRRScreenPrivate" disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="34"/>
    </record>
    <constant name="RR_CONNECTOR_TYPE_PANEL"
              value="Panel"
              c:type="GNOME_RR_CONNECTOR_TYPE_PANEL">
      <source-position filename="../libcinnamon-desktop/gnome-rr.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="WallClock"
           c:symbol-prefix="wall_clock"
           c:type="GnomeWallClock"
           parent="GObject.Object"
           glib:type-name="GnomeWallClock"
           glib:get-type="gnome_wall_clock_get_type"
           glib:type-struct="WallClockClass">
      <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                       line="59"/>
      <constructor name="new" c:identifier="gnome_wall_clock_new">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="525">Returns a new GnomeWallClock instance</doc>
        <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-wall-clock.c"
               line="530">A pointer to a new GnomeWallClock instance.</doc>
          <type name="WallClock" c:type="GnomeWallClock*"/>
        </return-value>
      </constructor>
      <method name="get_clock" c:identifier="gnome_wall_clock_get_clock">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="449">Returns a formatted date and time based on either default format
settings, or via a custom-set format string.

The returned string should be ready to be set on a label.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-wall-clock.c"
               line="458">The formatted date/time string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-wall-clock.c"
                 line="451">The GnomeWallClock</doc>
            <type name="WallClock" c:type="GnomeWallClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_clock_for_format"
              c:identifier="gnome_wall_clock_get_clock_for_format">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="497">Returns a formatted date and time based on the provided format string.
The returned string should be ready to be set on a label.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-wall-clock.c"
               line="505">The formatted date/time string, or NULL
if there was a problem with the format string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-wall-clock.c"
                 line="499">The GnomeWallClock</doc>
            <type name="WallClock" c:type="GnomeWallClock*"/>
          </instance-parameter>
          <parameter name="format_string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_date_format"
              c:identifier="gnome_wall_clock_get_default_date_format">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="482">Returns the current date-only format based on current locale
defaults and clock settings.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-wall-clock.c"
               line="489">The default date format string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-wall-clock.c"
                 line="484">The GnomeWallClock</doc>
            <type name="WallClock" c:type="GnomeWallClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_time_format"
              c:identifier="gnome_wall_clock_get_default_time_format">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="467">Returns the current time-only format based on current locale
defaults and clock settings.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-wall-clock.c"
               line="474">The default time format string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-wall-clock.c"
                 line="469">The GnomeWallClock</doc>
            <type name="WallClock" c:type="GnomeWallClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_format_string"
              c:identifier="gnome_wall_clock_set_format_string">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="538">Sets the wall clock to use the provided format string for any
subsequent updates.  Passing NULL will un-set any custom format,
and rely on a default locale format.

Any invalid format string passed will cause it to be ignored,
and the default locale format used instead.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-wall-clock.c"
               line="550">Whether or not the format string was valid and accepted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="clock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-wall-clock.c"
                 line="540">The GnomeWallClock</doc>
            <type name="WallClock" c:type="GnomeWallClock*"/>
          </instance-parameter>
          <parameter name="format_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="clock" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="220">A formatted string representing the current clock display.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="format-string" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-wall-clock.c"
             line="233">If not NULL, the wall clock will format the time/date according to
this format string.  If the format string is invalid, the default string
will be used instead.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WallClockPrivate" c:type="GnomeWallClockPrivate*"/>
      </field>
    </class>
    <record name="WallClockClass"
            c:type="GnomeWallClockClass"
            glib:is-gtype-struct-for="WallClock">
      <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                       line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="WallClockPrivate"
            c:type="GnomeWallClockPrivate"
            disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-wall-clock.h"
                       line="45"/>
    </record>
    <class name="XkbInfo"
           c:symbol-prefix="xkb_info"
           c:type="GnomeXkbInfo"
           parent="GObject.Object"
           glib:type-name="GnomeXkbInfo"
           glib:get-type="gnome_xkb_info_get_type"
           glib:type-struct="XkbInfoClass">
      <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                       line="59"/>
      <constructor name="new" c:identifier="gnome_xkb_info_new">
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-xkb-info.c"
               line="673">a new #GnomeXkbInfo instance.</doc>
          <type name="XkbInfo" c:type="GnomeXkbInfo*"/>
        </return-value>
      </constructor>
      <function name="free_var_defs"
                c:identifier="gnome_xkb_info_free_var_defs"
                version="3.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-xkb-info.c"
             line="183">Frees an #XkbRF_VarDefsRec instance allocated by
gnome_xkb_info_get_var_defs().</doc>
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="var_defs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="185">#XkbRF_VarDefsRec instance to free</doc>
            <type c:type="XkbRF_VarDefsRec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_var_defs"
                c:identifier="gnome_xkb_info_get_var_defs"
                version="3.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-xkb-info.c"
             line="133">Gets both the XKB rules file path and the current XKB parameters in
use by the X server.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rules"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="135">location to store the rules file
path. Use g_free() when it's no longer needed</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="var_defs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="137">location to store a
#XkbRF_VarDefsRec pointer. Use gnome_xkb_info_free_var_defs() to
free it</doc>
            <type c:type="XkbRF_VarDefsRec**"/>
          </parameter>
        </parameters>
      </function>
      <method name="description_for_option"
              c:identifier="gnome_xkb_info_description_for_option"
              version="3.6">
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-xkb-info.c"
               line="779">the translated description for the option @id.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="775">a #GnomeXkbInfo</doc>
            <type name="XkbInfo" c:type="GnomeXkbInfo*"/>
          </instance-parameter>
          <parameter name="group_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="776">identifier for group containing the option</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="777">option identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_all_layouts"
              c:identifier="gnome_xkb_info_get_all_layouts"
              version="3.6">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-xkb-info.c"
             line="681">Returns a list of all layout identifiers we know about.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="63"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-xkb-info.c"
               line="687">the list
of layout names. The caller takes ownership of the #GList but not
of the strings themselves, those are internally allocated and must
not be modified.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="683">a #GnomeXkbInfo</doc>
            <type name="XkbInfo" c:type="GnomeXkbInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_all_option_groups"
              c:identifier="gnome_xkb_info_get_all_option_groups"
              version="3.6">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-xkb-info.c"
             line="709">Returns a list of all option group identifiers we know about.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="77"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-xkb-info.c"
               line="715">the list
of option group ids. The caller takes ownership of the #GList but
not of the strings themselves, those are internally allocated and
must not be modified.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="711">a #GnomeXkbInfo</doc>
            <type name="XkbInfo" c:type="GnomeXkbInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout_info"
              c:identifier="gnome_xkb_info_get_layout_info"
              version="3.6">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-xkb-info.c"
             line="810">Retrieves information about a layout. Both @display_name and
@short_name are suitable to show in UIs and might be localized if
translations are available.

Some layouts don't provide a short name (2 or 3 letters) or don't
specify a XKB variant, in those cases @short_name or @xkb_variant
are empty strings, i.e. "".

If the given layout doesn't exist the return value is %FALSE and
all the (out) parameters are set to %NULL.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-xkb-info.c"
               line="834">%TRUE if the layout exists or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="812">a #GnomeXkbInfo</doc>
            <type name="XkbInfo" c:type="GnomeXkbInfo*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="813">layout's identifier about which to retrieve the info</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="display_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="814">location to store
the layout's display name, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="short_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="816">location to store
the layout's short name, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="xkb_layout"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="818">location to store
the layout's XKB name, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="xkb_variant"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="820">location to store
the layout's XKB variant, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_layout_info_for_language"
              c:identifier="gnome_xkb_info_get_layout_info_for_language"
              version="3.6">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-xkb-info.c"
             line="894">Retrieves the layout that better fits @language. It also fetches
information about that layout like gnome_xkb_info_get_layout_info().

If a layout can't be found the return value is %FALSE and all the
(out) parameters are set to %NULL.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-xkb-info.c"
               line="915">%TRUE if a layout exists or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="896">a #GnomeXkbInfo</doc>
            <type name="XkbInfo" c:type="GnomeXkbInfo*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="897">an ISO 639 code</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="898">location to store the
layout's indentifier, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="display_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="900">location to store
the layout's display name, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="short_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="902">location to store
the layout's short name, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="xkb_layout"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="904">location to store
the layout's XKB name, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="xkb_variant"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="906">location to store
the layout's XKB variant, or %NULL</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_options_for_group"
              c:identifier="gnome_xkb_info_get_options_for_group"
              version="3.6">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-xkb-info.c"
             line="737">Returns a list of all option identifiers we know about for group
@group_id.</doc>
        <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                         line="78"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-xkb-info.c"
               line="745">the list
of option ids. The caller takes ownership of the #GList but not of
the strings themselves, those are internally allocated and must not
be modified.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="739">a #GnomeXkbInfo</doc>
            <type name="XkbInfo" c:type="GnomeXkbInfo*"/>
          </instance-parameter>
          <parameter name="group_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libcinnamon-desktop/gnome-xkb-info.c"
                 line="740">group's identifier about which to retrieve the options</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="XkbInfoPrivate" c:type="GnomeXkbInfoPrivate*"/>
      </field>
    </class>
    <record name="XkbInfoClass"
            c:type="GnomeXkbInfoClass"
            glib:is-gtype-struct-for="XkbInfo">
      <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                       line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="XkbInfoPrivate" c:type="GnomeXkbInfoPrivate" disguised="1">
      <source-position filename="../libcinnamon-desktop/gnome-xkb-info.h"
                       line="45"/>
    </record>
    <function name="desktop_get_media_key_string"
              c:identifier="gnome_desktop_get_media_key_string">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-desktop-utils.c"
           line="181">Returns the GSettings key string of the
given media key type.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-utils.h"
                       line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-utils.c"
             line="188">the string corresponding to the
provided media key type or %NULL</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-utils.c"
               line="183">The CDesktopMediaKeyType</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_get_session_user_pwent"
              c:identifier="gnome_desktop_get_session_user_pwent"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-desktop-utils.c"
           line="199">Makes a best effort to retrieve the currently logged-in user's passwd
struct (containing uid, gid, home, etc...) based on the process uid
and various environment variables.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-utils.h"
                       line="47"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-utils.c"
             line="206">the passwd struct corresponding to the
session user (or, as a last resort, the user returned by getuid())</doc>
        <type name="gpointer" c:type="passwd*"/>
      </return-value>
    </function>
    <function name="desktop_prepend_terminal_to_vector"
              c:identifier="gnome_desktop_prepend_terminal_to_vector">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-desktop-utils.c"
           line="37">Prepends a terminal (either the one configured as default in
the user's GNOME setup, or one of the common xterm emulators) to the passed
in vector, modifying it in the process.  The vector should be allocated with
#g_malloc, as this will #g_free the original vector.  Also all elements must
have been allocated separately.  That is the standard glib/GNOME way of
doing vectors however.  If the integer that @argc points to is negative, the
size will first be computed.  Also note that passing in pointers to a vector
that is empty, will just create a new vector for you.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-utils.h"
                       line="44"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-utils.c"
               line="39">a pointer to the vector size</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-utils.c"
               line="40">a pointer to the vector</doc>
          <type name="utf8" c:type="char***"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_cache_check_permissions"
              c:identifier="gnome_desktop_thumbnail_cache_check_permissions">
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="110"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="factory" transfer-ownership="none">
          <type name="DesktopThumbnailFactory"
                c:type="GnomeDesktopThumbnailFactory*"/>
        </parameter>
        <parameter name="quick" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_cache_fix_permissions"
              c:identifier="gnome_desktop_thumbnail_cache_fix_permissions">
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="109"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="desktop_thumbnail_has_uri"
              c:identifier="gnome_desktop_thumbnail_has_uri"
              version="2.2">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
           line="1685">Returns whether the thumbnail has the correct uri embedded in the
Thumb::URI option in the png.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="92"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1693">TRUE if the thumbnail is for @uri</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1687">an loaded thumbnail pixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1688">a uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_is_valid"
              c:identifier="gnome_desktop_thumbnail_is_valid"
              version="2.2">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
           line="1710">Returns whether the thumbnail has the correct uri and mtime embedded in the
png options.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="94"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1719">TRUE if the thumbnail has the right @uri and @mtime</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1712">an loaded thumbnail #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1713">a uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="mtime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1714">the mtime</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_md5"
              c:identifier="gnome_desktop_thumbnail_md5"
              version="2.2"
              deprecated="1"
              deprecated-version="2.22">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
           line="1631">Calculates the MD5 checksum of the uri. This can be useful
if you want to manually handle thumbnail files.</doc>
      <doc-deprecated xml:space="preserve">Use #GChecksum instead</doc-deprecated>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="97"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1638">A string with the MD5 digest of the uri string.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1633">an uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_path_for_uri"
              c:identifier="gnome_desktop_thumbnail_path_for_uri"
              version="2.2">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
           line="1651">Returns the filename that a thumbnail of size @size for @uri would have.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="98"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
             line="1658">an absolute filename</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1653">an uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-desktop-thumbnail.c"
               line="1654">a thumbnail size</doc>
          <type name="DesktopThumbnailSize"
                c:type="GnomeDesktopThumbnailSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_scale_down_pixbuf"
              c:identifier="gnome_desktop_thumbnail_scale_down_pixbuf"
              version="2.2">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-thumbnail-pixbuf-utils.c"
           line="37">Scales the pixbuf to the desired size. This function
is a lot faster than gdk-pixbuf when scaling down by
large amounts.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-desktop-thumbnail.h"
                       line="104"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-thumbnail-pixbuf-utils.c"
             line="47">a scaled pixbuf</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-thumbnail-pixbuf-utils.c"
               line="39">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="dest_width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-thumbnail-pixbuf-utils.c"
               line="40">the desired new width</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-thumbnail-pixbuf-utils.c"
               line="41">the desired new height</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="installer_check_for_packages"
              c:identifier="gnome_installer_check_for_packages">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-installer.c"
           line="333">Uses packagekit to check if provided package names are installed.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-installer.h"
                       line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="packages" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-installer.c"
               line="335">a null-terminated array of package names</doc>
          <array c:type="const gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-installer.c"
               line="336">the callback to run for the result</doc>
          <type name="InstallerClientCallback"
                c:type="GnomeInstallerClientCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-installer.c"
               line="337">extra data to be sent to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="installer_install_packages"
              c:identifier="gnome_installer_install_packages">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-installer.c"
           line="313">Uses packagekit to install the provided list of packages.</doc>
      <source-position filename="../libcinnamon-desktop/gnome-installer.h"
                       line="26"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="packages" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-installer.c"
               line="315">a null-terminated array of package names</doc>
          <array c:type="const gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-installer.c"
               line="316">the callback to run for the result</doc>
          <type name="InstallerClientCallback"
                c:type="GnomeInstallerClientCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libcinnamon-desktop/gnome-installer.c"
               line="317">extra data to be sent to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="rr_error_quark" c:identifier="gnome_rr_error_quark">
      <doc xml:space="preserve"
           filename="../libcinnamon-desktop/gnome-rr.c"
           line="163">Returns the #GQuark that will be used for #GError values returned by the
GnomeRR API.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libcinnamon-desktop/gnome-rr.c"
             line="169">a #GQuark used to identify errors coming from the GnomeRR API.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
